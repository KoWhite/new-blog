{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"230a0c42344a1feacedd45f5765cf8661ab41a47","modified":1637216291980},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1637214467631},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1637214467631},{"_id":"themes/pure/README.cn.md","hash":"7facc2f8aadaf4c172dfc931bebcc37b9ef3d7e8","modified":1637214467632},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1637214467632},{"_id":"themes/pure/_config.yml","hash":"3e312ab0e1421056b4b034db510fd4341d6ac167","modified":1637218193962},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1637214467634},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1637214467679},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1637214467674},{"_id":"themes/pure/layout/archive.ejs","hash":"90fa5b0d8f081d0bde33b2784f66e6a80e5b0dac","modified":1637214467674},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1637214467675},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1637214467675},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1637214467676},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1637214467676},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1637214467676},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1637214467677},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1637214467677},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1637214467678},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1637214467678},{"_id":"themes/pure/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1637214467641},{"_id":"themes/pure/languages/en.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1637214467641},{"_id":"themes/pure/languages/zh-CN.yml","hash":"399061d959807b41e333808b4c7851ca290a82fe","modified":1637214467642},{"_id":"themes/pure/languages/zh-TW.yml","hash":"387ad2ca1b2a01dac36f768a6116a2033c3ac142","modified":1637214467642},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1637214467678},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1637214467698},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1637214467703},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1637214467679},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16dbe91b392ef9debb7abeffde473668d3337eb2","modified":1637214467630},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"a3b49dff53b405dbafe2e96834313fc329710007","modified":1637214467630},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1637214467631},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1637214467635},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1637214467635},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1637214467636},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1637214467636},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1637214467637},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1637214467638},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1637214467638},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1637214467640},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1637214467639},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1637214467643},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1637214467643},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1637214467644},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1637214467644},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1637214467645},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1637214467663},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1637214467663},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1637214467664},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"6e671c659b282b690a5d61e842b5d5f38dced6d7","modified":1637214467664},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1637214467665},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1637214467665},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1637214467666},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"e2f8ba48f7a659c74d5fc38930b873c167671044","modified":1637214467666},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1637214467645},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1637214467646},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1637214467646},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"e4810f8e03986d5a8afdf4c0932814a3d0db9ffe","modified":1637214467646},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1637214467647},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1637214467648},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1637214467648},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"8af3bcfc07c344cefa0655dbe83f3c1a55954899","modified":1637214467649},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1637214467649},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"fdc5ac554e375f2e8b1e4dbe77cedda692f1228e","modified":1637214467650},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"bae5b4eb8b6415dc988bda88be1c4f8e252b1844","modified":1637214467650},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1637214467647},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"17787edc304543c8658c7f51076022bda6ad227d","modified":1637214467656},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"335a906404dada013d83508244e992c7a26fa879","modified":1637214467657},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1637214467657},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1637214467667},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1637214467667},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1637214467668},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1637214467668},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1637214467668},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1637214467671},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1637214467672},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1637214467673},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1637214467672},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1637214467673},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1637214467673},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1637214467704},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1637214467705},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1637214467707},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1637214467708},{"_id":"themes/pure/source/images/avatar.jpg","hash":"6840ad53f34df834c69ea0a1dd47e1029be3b0ed","modified":1637215070782},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1637214467714},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1637214467713},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1637214467714},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1637214467715},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1637214467715},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1637214467658},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1637214467659},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1637214467659},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1637214467660},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"6234ef13a1290f8849ca850641c0be0ab6af8cef","modified":1637214467660},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1637214467660},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1637214467661},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1637214467661},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1637214467662},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1637214467662},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1637214467663},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1637214467651},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1637214467652},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"c690e62e930ac7e66a5982aa95e146324e9b1e7f","modified":1637214467652},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1637214467653},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1637214467653},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1637214467653},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"15255c9b1644a79be097f6af26f0317a507b0690","modified":1637214467654},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1637214467654},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1637214467655},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1637214467655},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1637214467656},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1637214467656},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"ccd0eccc16100a8880382ab5f9a6a14f3bc0bff2","modified":1637216989653},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"75873bbebf8c2bb6722ab60bae177bd04b7f60fd","modified":1637216931520},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1637214467711},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1637214467711},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1637214467712},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1637214467682},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1637214467681},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1637214467683},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1637214467685},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1637214467686},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1637214467716},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1637214467720},{"_id":"themes/pure/source/css/style.css","hash":"ff0731ff99c03b9120a60e1a70df78d209f7cbf4","modified":1637214467702},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1637214467706},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1637214467703},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1637214467718},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1637214467719},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1637214467697},{"_id":"source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1637214467635},{"_id":"source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1637214467636},{"_id":"source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1637214467635},{"_id":"source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1637214467636},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1637214467637},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1637214467638},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1637214467640},{"_id":"source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1637214467638},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1637214467639},{"_id":"source/_posts/webpack1.md","hash":"eab5ad1b664f603177ea582326f3306a7a6f21a3","modified":1637217866608},{"_id":"source/_posts/webpack入门.md","hash":"a6a6187c209edce8531c1ec3aca03976c69401f5","modified":1637294014044},{"_id":"source/_posts/webpack构建速度及体积优化.md","hash":"893a8135f9358799cca7fa825cfc2a183b367500","modified":1637294119980},{"_id":"source/_posts/webpack构建配置.md","hash":"ca78502e3f3465c512d89dd4ab1bd8f71b6a1027","modified":1637294107829},{"_id":"source/_posts/webpack进阶.md","hash":"f37967bcb5a3a2f02cf0970fe1f1ef6669359e60","modified":1637294097126}],"Category":[],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2021-11-18T05:47:47.635Z","updated":"2021-11-18T05:47:47.635Z","path":"/404.html","_id":"ckw4k800b0000skvc4oojblj1","layout":"page","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n"},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍","date":"2021-11-18T05:47:47.636Z","updated":"2021-11-18T05:47:47.636Z","path":"about/index.html","_id":"ckw4k801r0001skvc8u7pfqyn","content":"<p>个人详细介绍</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-11-18T05:47:47.638Z","updated":"2021-11-18T05:47:47.638Z","path":"links/index.html","_id":"ckw4k80820003skvcfzwhe9sk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2021-11-18T05:47:47.640Z","updated":"2021-11-18T05:47:47.640Z","path":"tags/index.html","_id":"ckw4k80ax0004skvcdhox7576","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2021-11-18T05:47:47.638Z","updated":"2021-11-18T05:47:47.638Z","path":"categories/index.html","_id":"ckw4k80c80005skvcf08v90jq","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-11-18T05:47:47.639Z","updated":"2021-11-18T05:47:47.639Z","path":"repository/index.html","_id":"ckw4k80f30006skvcfwtxecnl","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"webpack入门","date":"2021-11-19T03:52:59.000Z","_content":"\n## 初始化\n### 初始化一个简单的package.json\n```\nnpm init\n```\n\n### 安装webpack\n```\nnpm i webpack webpack-cli --save-dev\n```\nor\n```\nyarn add webpack webpack-cli --save-dev\n```\n\n## 例子引入\n1、 在上面的环境安装好之后，在当前文件夹下创建`webpack.config.js`，此文件是webpack的配置文件\n```javaScript\n'use strict';\n\nconst path = require('path');\n\nmodule.export = {\n    entry: './src/index.js',\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: 'bundle.js'\n    },\n    mode: 'production'\n}\n```\n\n2、从上面代码的字面意思，`entry`是入口文件的路径，output应该是和输出相关。接下来我们在当前文件夹下创建src/index.js文件并且写入以下代码\n```javaScript\ndocument.write('hello world');\n```\n然后在最外层文件夹下创建dist文件夹。\n\n3、我们在package.json文件中scripts添加下面的代码：\n```json\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\" // 此为要添加的，原理：模块局部安装在node_modules/.bin目录创建软链接\n}\n```\n4、我们在终端运行指令`npm run webpack`，就可以在dist文件夹下看到我们打包好的文件。\n\n以上是一个简单的webpack打包的例子，接下来我们深入了解\n\n## 核心概念\n### 1. entry\n::: tip 概念\nentry 指定webpack打包入口（源代码）\n:::\n（1）单入口时是字符串\n```javaScript\nmodule.exports = {\n    entry: './path/to/my/entry/file.js'\n};\n```\n（2）多入口时是对象\n```javaScript\nmodule.exports = {\n    entry: {\n        app: './src/app.js',\n        adminApp: './src/adminApp.js'\n    }\n};\n```\n### 2.output\n::: tip 概念\nOutput 用来告诉webpack如何将编译后的文件输出到磁盘（webpack打包结果代码）\n:::\n（1）单入口配置\n```javaScript\nmodule.exports = {\n    entry: './path/to/my/entry/file.js',\n    output: {\n        filename: 'bundle.js'\n        path: __dirname + '/dist'\n    }\n};\n```\n(2) 多入口配置 （通过占位符确保文件名称唯一）\n```javaScript\nmodule.exports = {\n    entry: {\n        app: './src/app.js',\n        search: './src/search.js'\n    },\n    output: {\n        filename: '[name].js',\n        path: __dirname + '/dist'\n    }\n};\n```\n### 3. loaders\n::: tip 概念\nwebpack开箱即用只支持js和json两种文件类型，通过Loader可以支持其他文件类型并且把他们转换为有效的模块，添加到依赖图中。\nLoader本身是一个函数，接受源文件为参数，返回转换结果。\n:::\n#### 常用的Loaders\n1. babel-loader\n转换ES6、ES7等JS新特性的语法\n\n2. css-loader\n支持.css文件的加载和解析\n\n3. less-loader\n将less文件转换成css\n\n4. ts-loader\n将TS转换为JS\n\n5. file-loader\n进行图片、文字等的打包\n\n6. raw-loader\n将文件以字符串的形式导入\n\n7. thread-loader\n多进程打包JS和CSS (提高打包速度)\n\n#### 用法\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    output: {\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.txt$/,  // 指定匹配规则\n                use: 'raw-loader' // 指定使用loader名称\n            }\n        ]\n    }\n}\n```\n\n### 4. plugins\n::: tip 概念\n插件用于bundle文件的优化，资源管理和环境变量注入\n作用于整个构建过程\n:::\n#### 常用plugins\n1. CommonsChunkPlugin 将chunks相同的模块代码提取成公共的js\n\n2. CleanWebpackPlugin 清理构建目录\n\n3. ExtractTextWebpackPlugin 将CSS从bundle文件里提取成一个独立的css文件\n\n4. CopyWebpackPlugin 将文件或者文件夹拷贝到构建的输出目录\n\n5. HtmlWebpackPlugin 创建html文件去承载输出的bundle\n\n6. UglifyjsWebpackPlugin 压缩js\n\n7. ZipWebpackPlugin 将打包出的资源生成一个zip包\n\n#### 用法 (放plugins数组里)\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    output: {\n        filename: 'bundle.js'\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n### 5.mode\n::: tip 概念\nMode 指定当前构建环境是: production（生产环境）、development（开发阶段）还是none\n设置 mode 可以使用wenpack内置函数，默认为priduction (wp4新概念)\n:::\n#### 功能介绍\n1. development\n设置`process.env.NODE_ENV`的值为`development`，开启`NamedChunksPlugin`和`NamedModulesPlugin`。\n\n2. production\n设置`process.env.NODE_ENV`的值为`production`，开启`FlagDependencyUsagePlugin`,`FlagIncludedChunksPlugin`,`ModuleConcatenationPlugin`,`NoEmitOnErrorsPlugin`,`OccurrenceOrderPlugin`,`SideEffectsFlagPlugin`,`TerserPlugin`。\n\n3. none\n不开启任何优化选项\n\n## 使用\n### 1. 解析ES6（使用babel）\n安装babel\n```\nnpm i @babel/core @babel/preset-env babel-loader -D\n```\nor\n```\nyarn add @babel/core @babel/preset-env babel-loader -D\n```\n首先使用`babel-loader`,在webpack配置文件中添加此loader\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            }\n        ]\n    }\n}\n```\n使用babel配置文件，创建`.babelrc`，添加babel preset配置\n```json\n{\n    \"presets\": [\n        \"@babel/preset-env\"\n    ]\n}\n```\n\n### 2.解析React JSX\n安装\n```\nnpm i react react-dom @babel/preset-react -D\n```\nor\n```\nyarn add react react-dom @babel/preset-react -D\n```\n在上面的基础上，在.babelrc增加：\n```json\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-react\" // 新增React 的 babel preset配置\n    ]\n}\n```\n之后我们修改我们的src/search.js文件\n```javaScript\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\nexport default class Search extends React.Component {\n\n    render () {\n        return (\n            <div>Search Text</div>\n        )\n    }\n}\n\nReactDom.render(\n    <Search />,\n    document.getElementById('root')\n)\n```\n\n### 3.解析css\ncss-loader用于加载.css文件，并且转换成commonjs对象\n\nstyle-loader 将样式通过style标签插入到head中\n安装\n```\nnpm i style-loader css-loader -D\n```\nor \n```\nyarn add style-loader css-loader -D\n```\n添加Loader:\n```javaScript\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'production',\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            // 以下为添加内容\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            }\n        ]\n    }\n}\n```\n在代码中使用import引入css文件，我们构建之后可以发现样式是生效的。\n\n### 4. 解析Less和SaSS\nless-loader用于将less转换为css.\n\n首先我们安装Less和less-loader\n```\nnpm i less less-loader -D\n```\nor\n```\nyarn add less less-loader -D\n```\n`webpack.config.js`添加`less-loader`:\n```javaScript\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'production',\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            },\n            //以下为添加内容\n            {\n                test: /\\.less$/,\n                use: [\n                    'style-loader',\n                    'css-loader',\n                    'less-loader'\n                ]\n            }\n        ]\n    }\n}\n```\n\n### 5、解析图片或字体\n解析图片需要用到`file-loader`用于处理文件\n\n首先我们需要在项目中安装`file-loader`:\n```\nnpm i file-loader -D\n```\nor\n```\nyarn add file-loader -D\n```\n\n在`webpack.config.js`中引入`file-loader`\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: 'file-loader'\n}\n```\n\n而后我们就可以在项目中引用图片文件在最后构建的时候也能够成功\n\n解析字体也可以用`file-loader`处理\n\n```javaScript\n{\n    test: /\\.(woff|woff2|eot|ttf|otf)$/,\n    use: 'file-loader'\n}\n```\n\n除了使用`file-loader`解析之外，我们还可以使用`url-loader`，可以设置较小资源自动base64\n\n使用前先安装\n```\nnpm i url-loader -D\n```\nor\n```\nyarn add url-loader -D\n```\n\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: {\n        loader: 'url-loader',\n        options: {\n            limit: 10240\n        }\n    }\n}\n```\n\n以上是几个常用的loader的用法\n\n## webpack文件监听\n::: tip 概念\n文件监听是发现源码发生变化时，自动重新构建出新的输出文件。\n:::\nwebpack开启监听模式，有两种方式：\n\n1. 启动webpack命令时，带上--watch参数；(唯一缺陷：每次需手动刷新浏览器)\n修改package.json文件\n```javaScript\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\"\n}\n```\n2. 在配置`webpack.config.js`中设置`watch:true`；\n\n### 原理分析\n轮询判断文件的最后编辑时间是否变化\n\n某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout\n```javaScript\nmodule.export = {\n    // 默认false，也就是不开启\n    watch: true,\n    // 只有当watch:true时，watchOptions才有意义\n    watchOptions: {\n        // 默认为空，不监听的文件或者文件夹，支持正则匹配\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再执行，默认为300ms\n        aggregateTimeout: 300,\n        // 判断文件是否发生变化时通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次\n        poll: 1000\n    }\n}\n```\n\n## 热更新\n### 1. webpack-dev-server\n:::tip 特点\nWDS不刷新浏览器；不输出文件，而是放在内存中；使用HotModuleReplacementPlugin插件\n:::\n首先需要安装`webpack-dev-server`\n```\nnpm i webpack-dev-server -D\n```\nor\n```\nyarn add webpack-dev-server -D\n```\n然后修改`package.json`:\n```javaScript\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\",\n    \"dev\": \"webpack-dev-server --open\"\n}\n```\n配置好之后，我们修改`webpack.config.js`配置文件\n```javaScript\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'development', // 修改环境\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    'style-loader',\n                    'css-loader',\n                    'less-loader'\n                ]\n            },\n            {\n                test:/\\.(png|jpg|gif|jpeg)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 10240\n                    }\n                }\n            },\n            {\n                test: /\\.(woff|woff2|eot|ttf|otf)$/,\n                use: 'file-loader'\n            }\n        ]\n    },\n    //以下为添加内容\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        contentBase: './dist',\n        hot: true  // webpack文档表明配置了此会自动引入这个插件\n    }\n}\n```\n我们执行`npm run dev`命令，就可以实现代码热更新\n\n### 2. webpack-dev-middleware\n:::tip 特点\nWDM 将webpack输出的文件传输给服务器，适用于灵活的定制场景\n:::\n```javaScript\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\napp.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath\n}))\n\napp.listen(3000, function () {\n    console.log('Example app listening on port 3000!\\n')\n})\n```\n\n### 热更新的原理\n1、Webpack Compile: 将JS编译成Bundle;\n\n2、HMR Server: 将热更新的文件输出给HMR Runtime;\n\n3、Bundle Server: 提供文件在浏览器访问;\n\n4、HMR Runtime: 会被注入到浏览器，更新文件变化;（桥）\n\n5、bundle.js: 构建输出文件\n\n## 文件指纹\n:::tip 概念\n打包后输出的文件名的后缀，好处：版本管理\n:::\n### 种类\n1. Hash: 和整个项目的构建相关，只要项目文件有修改，整个项目构建的hash值就会改变；\n\n2. Chunkhash: 和webpack打包的chunk有关，不同的entry会生成不同的chunkhash值；\n\n3. Contenthash: 根据文件内容来定义hash, 文件内容不变，则contenthash不变（css文件）\n\n### 使用\n1、chunkhash: 设置output的filename\n```javaScript\nentry: {\n    index: './src/index.js',\n    search: './src/search.js'\n},\noutput: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name][chunkhash:8].js'\n}\n```\n2、contenthash\n```javaScript\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name][contenthash:8].css'\n    })\n]\n```\n3、hash，设置file-loader的name\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: {\n        loader: 'file-loader',\n        options: {\n            name: 'img/[name][hash:8].[ext]'\n        }\n    }\n}\n```\n\n## 代码压缩\n### 1. JS文件压缩\n内置`uglifyjs-webpack-plugin`(默认打包出来是已压缩)\n\n### 2. CSS文件压缩\n使用`optimize-css-assets-webpack-plugin`，同时使用`cssnano`\n\n首先安装`optimize-css-assets-webpack-plugin`\n```\nnpm i optimize-css-assets-webpack-plugin -D\n```\nor\n```\nyarn add optimize-css-assets-webpack-plugin -D\n```\n其次安装`cssnano`\n```\nnpm i cssnano -D\n```\nor\n```\nyarn add cssnano -D\n```\n修改`webpack.config.js`\n```javaScript\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin'); // 先引入插件\n\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name]_[contenthash:8].css'\n    }),\n    // 设置插件内容\n    new OptimizeCSSAssetsPlugin ({\n        assetNameRegExp: /\\.css$/g,\n        cssProcessor: require('cssnano')\n    })\n]\n```\n\n### 3. HTML文件压缩\n`html-webpack-plugin`，设置压缩参数\n首先安装`html-webpack-plugin`\n```\nnpm i html-webpack-plugin -D\n```\nor\n```\nyarn add html-webpack-plugin -D\n```\n修改`webpack.config.js`\n```javaScript\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name]_[contenthash:8].css'\n    }),\n    new OptimizeCSSAssetsPlugin ({\n        assetNameRegExp: /\\.css$/g,\n        cssProcessor: require('cssnano')\n    }),\n    // 以下为新增内容，现在src下创建两个html文件\n    new HtmlWebpackPlugin ({\n        template: path.join(__dirname, 'src/search.html'),\n        filename: 'search.html',\n        chunks: ['search'],\n        inject: true,\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    }),\n    new HtmlWebpackPlugin ({\n        template: path.join(__dirname, 'src/index.html'),\n        filename: 'index.html',\n        chunks: ['index'],\n        inject: true,\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    })\n]\n```\n","source":"_posts/webpack入门.md","raw":"---\ntitle: webpack入门\ndate: 2021-11-19 11:52:59\ntags:\n---\n\n## 初始化\n### 初始化一个简单的package.json\n```\nnpm init\n```\n\n### 安装webpack\n```\nnpm i webpack webpack-cli --save-dev\n```\nor\n```\nyarn add webpack webpack-cli --save-dev\n```\n\n## 例子引入\n1、 在上面的环境安装好之后，在当前文件夹下创建`webpack.config.js`，此文件是webpack的配置文件\n```javaScript\n'use strict';\n\nconst path = require('path');\n\nmodule.export = {\n    entry: './src/index.js',\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: 'bundle.js'\n    },\n    mode: 'production'\n}\n```\n\n2、从上面代码的字面意思，`entry`是入口文件的路径，output应该是和输出相关。接下来我们在当前文件夹下创建src/index.js文件并且写入以下代码\n```javaScript\ndocument.write('hello world');\n```\n然后在最外层文件夹下创建dist文件夹。\n\n3、我们在package.json文件中scripts添加下面的代码：\n```json\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\" // 此为要添加的，原理：模块局部安装在node_modules/.bin目录创建软链接\n}\n```\n4、我们在终端运行指令`npm run webpack`，就可以在dist文件夹下看到我们打包好的文件。\n\n以上是一个简单的webpack打包的例子，接下来我们深入了解\n\n## 核心概念\n### 1. entry\n::: tip 概念\nentry 指定webpack打包入口（源代码）\n:::\n（1）单入口时是字符串\n```javaScript\nmodule.exports = {\n    entry: './path/to/my/entry/file.js'\n};\n```\n（2）多入口时是对象\n```javaScript\nmodule.exports = {\n    entry: {\n        app: './src/app.js',\n        adminApp: './src/adminApp.js'\n    }\n};\n```\n### 2.output\n::: tip 概念\nOutput 用来告诉webpack如何将编译后的文件输出到磁盘（webpack打包结果代码）\n:::\n（1）单入口配置\n```javaScript\nmodule.exports = {\n    entry: './path/to/my/entry/file.js',\n    output: {\n        filename: 'bundle.js'\n        path: __dirname + '/dist'\n    }\n};\n```\n(2) 多入口配置 （通过占位符确保文件名称唯一）\n```javaScript\nmodule.exports = {\n    entry: {\n        app: './src/app.js',\n        search: './src/search.js'\n    },\n    output: {\n        filename: '[name].js',\n        path: __dirname + '/dist'\n    }\n};\n```\n### 3. loaders\n::: tip 概念\nwebpack开箱即用只支持js和json两种文件类型，通过Loader可以支持其他文件类型并且把他们转换为有效的模块，添加到依赖图中。\nLoader本身是一个函数，接受源文件为参数，返回转换结果。\n:::\n#### 常用的Loaders\n1. babel-loader\n转换ES6、ES7等JS新特性的语法\n\n2. css-loader\n支持.css文件的加载和解析\n\n3. less-loader\n将less文件转换成css\n\n4. ts-loader\n将TS转换为JS\n\n5. file-loader\n进行图片、文字等的打包\n\n6. raw-loader\n将文件以字符串的形式导入\n\n7. thread-loader\n多进程打包JS和CSS (提高打包速度)\n\n#### 用法\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    output: {\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.txt$/,  // 指定匹配规则\n                use: 'raw-loader' // 指定使用loader名称\n            }\n        ]\n    }\n}\n```\n\n### 4. plugins\n::: tip 概念\n插件用于bundle文件的优化，资源管理和环境变量注入\n作用于整个构建过程\n:::\n#### 常用plugins\n1. CommonsChunkPlugin 将chunks相同的模块代码提取成公共的js\n\n2. CleanWebpackPlugin 清理构建目录\n\n3. ExtractTextWebpackPlugin 将CSS从bundle文件里提取成一个独立的css文件\n\n4. CopyWebpackPlugin 将文件或者文件夹拷贝到构建的输出目录\n\n5. HtmlWebpackPlugin 创建html文件去承载输出的bundle\n\n6. UglifyjsWebpackPlugin 压缩js\n\n7. ZipWebpackPlugin 将打包出的资源生成一个zip包\n\n#### 用法 (放plugins数组里)\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    output: {\n        filename: 'bundle.js'\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ]\n}\n```\n### 5.mode\n::: tip 概念\nMode 指定当前构建环境是: production（生产环境）、development（开发阶段）还是none\n设置 mode 可以使用wenpack内置函数，默认为priduction (wp4新概念)\n:::\n#### 功能介绍\n1. development\n设置`process.env.NODE_ENV`的值为`development`，开启`NamedChunksPlugin`和`NamedModulesPlugin`。\n\n2. production\n设置`process.env.NODE_ENV`的值为`production`，开启`FlagDependencyUsagePlugin`,`FlagIncludedChunksPlugin`,`ModuleConcatenationPlugin`,`NoEmitOnErrorsPlugin`,`OccurrenceOrderPlugin`,`SideEffectsFlagPlugin`,`TerserPlugin`。\n\n3. none\n不开启任何优化选项\n\n## 使用\n### 1. 解析ES6（使用babel）\n安装babel\n```\nnpm i @babel/core @babel/preset-env babel-loader -D\n```\nor\n```\nyarn add @babel/core @babel/preset-env babel-loader -D\n```\n首先使用`babel-loader`,在webpack配置文件中添加此loader\n```javaScript\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            }\n        ]\n    }\n}\n```\n使用babel配置文件，创建`.babelrc`，添加babel preset配置\n```json\n{\n    \"presets\": [\n        \"@babel/preset-env\"\n    ]\n}\n```\n\n### 2.解析React JSX\n安装\n```\nnpm i react react-dom @babel/preset-react -D\n```\nor\n```\nyarn add react react-dom @babel/preset-react -D\n```\n在上面的基础上，在.babelrc增加：\n```json\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-react\" // 新增React 的 babel preset配置\n    ]\n}\n```\n之后我们修改我们的src/search.js文件\n```javaScript\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\nexport default class Search extends React.Component {\n\n    render () {\n        return (\n            <div>Search Text</div>\n        )\n    }\n}\n\nReactDom.render(\n    <Search />,\n    document.getElementById('root')\n)\n```\n\n### 3.解析css\ncss-loader用于加载.css文件，并且转换成commonjs对象\n\nstyle-loader 将样式通过style标签插入到head中\n安装\n```\nnpm i style-loader css-loader -D\n```\nor \n```\nyarn add style-loader css-loader -D\n```\n添加Loader:\n```javaScript\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'production',\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            // 以下为添加内容\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            }\n        ]\n    }\n}\n```\n在代码中使用import引入css文件，我们构建之后可以发现样式是生效的。\n\n### 4. 解析Less和SaSS\nless-loader用于将less转换为css.\n\n首先我们安装Less和less-loader\n```\nnpm i less less-loader -D\n```\nor\n```\nyarn add less less-loader -D\n```\n`webpack.config.js`添加`less-loader`:\n```javaScript\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'production',\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            },\n            //以下为添加内容\n            {\n                test: /\\.less$/,\n                use: [\n                    'style-loader',\n                    'css-loader',\n                    'less-loader'\n                ]\n            }\n        ]\n    }\n}\n```\n\n### 5、解析图片或字体\n解析图片需要用到`file-loader`用于处理文件\n\n首先我们需要在项目中安装`file-loader`:\n```\nnpm i file-loader -D\n```\nor\n```\nyarn add file-loader -D\n```\n\n在`webpack.config.js`中引入`file-loader`\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: 'file-loader'\n}\n```\n\n而后我们就可以在项目中引用图片文件在最后构建的时候也能够成功\n\n解析字体也可以用`file-loader`处理\n\n```javaScript\n{\n    test: /\\.(woff|woff2|eot|ttf|otf)$/,\n    use: 'file-loader'\n}\n```\n\n除了使用`file-loader`解析之外，我们还可以使用`url-loader`，可以设置较小资源自动base64\n\n使用前先安装\n```\nnpm i url-loader -D\n```\nor\n```\nyarn add url-loader -D\n```\n\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: {\n        loader: 'url-loader',\n        options: {\n            limit: 10240\n        }\n    }\n}\n```\n\n以上是几个常用的loader的用法\n\n## webpack文件监听\n::: tip 概念\n文件监听是发现源码发生变化时，自动重新构建出新的输出文件。\n:::\nwebpack开启监听模式，有两种方式：\n\n1. 启动webpack命令时，带上--watch参数；(唯一缺陷：每次需手动刷新浏览器)\n修改package.json文件\n```javaScript\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\"\n}\n```\n2. 在配置`webpack.config.js`中设置`watch:true`；\n\n### 原理分析\n轮询判断文件的最后编辑时间是否变化\n\n某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout\n```javaScript\nmodule.export = {\n    // 默认false，也就是不开启\n    watch: true,\n    // 只有当watch:true时，watchOptions才有意义\n    watchOptions: {\n        // 默认为空，不监听的文件或者文件夹，支持正则匹配\n        ignored: /node_modules/,\n        // 监听到变化发生后会等300ms再执行，默认为300ms\n        aggregateTimeout: 300,\n        // 判断文件是否发生变化时通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次\n        poll: 1000\n    }\n}\n```\n\n## 热更新\n### 1. webpack-dev-server\n:::tip 特点\nWDS不刷新浏览器；不输出文件，而是放在内存中；使用HotModuleReplacementPlugin插件\n:::\n首先需要安装`webpack-dev-server`\n```\nnpm i webpack-dev-server -D\n```\nor\n```\nyarn add webpack-dev-server -D\n```\n然后修改`package.json`:\n```javaScript\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\",\n    \"dev\": \"webpack-dev-server --open\"\n}\n```\n配置好之后，我们修改`webpack.config.js`配置文件\n```javaScript\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        search: './src/search.js'\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    mode: 'development', // 修改环境\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader'\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    'style-loader',// 链式调用，顺序从右到左\n                    'css-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    'style-loader',\n                    'css-loader',\n                    'less-loader'\n                ]\n            },\n            {\n                test:/\\.(png|jpg|gif|jpeg)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 10240\n                    }\n                }\n            },\n            {\n                test: /\\.(woff|woff2|eot|ttf|otf)$/,\n                use: 'file-loader'\n            }\n        ]\n    },\n    //以下为添加内容\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        contentBase: './dist',\n        hot: true  // webpack文档表明配置了此会自动引入这个插件\n    }\n}\n```\n我们执行`npm run dev`命令，就可以实现代码热更新\n\n### 2. webpack-dev-middleware\n:::tip 特点\nWDM 将webpack输出的文件传输给服务器，适用于灵活的定制场景\n:::\n```javaScript\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\napp.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath\n}))\n\napp.listen(3000, function () {\n    console.log('Example app listening on port 3000!\\n')\n})\n```\n\n### 热更新的原理\n1、Webpack Compile: 将JS编译成Bundle;\n\n2、HMR Server: 将热更新的文件输出给HMR Runtime;\n\n3、Bundle Server: 提供文件在浏览器访问;\n\n4、HMR Runtime: 会被注入到浏览器，更新文件变化;（桥）\n\n5、bundle.js: 构建输出文件\n\n## 文件指纹\n:::tip 概念\n打包后输出的文件名的后缀，好处：版本管理\n:::\n### 种类\n1. Hash: 和整个项目的构建相关，只要项目文件有修改，整个项目构建的hash值就会改变；\n\n2. Chunkhash: 和webpack打包的chunk有关，不同的entry会生成不同的chunkhash值；\n\n3. Contenthash: 根据文件内容来定义hash, 文件内容不变，则contenthash不变（css文件）\n\n### 使用\n1、chunkhash: 设置output的filename\n```javaScript\nentry: {\n    index: './src/index.js',\n    search: './src/search.js'\n},\noutput: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name][chunkhash:8].js'\n}\n```\n2、contenthash\n```javaScript\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name][contenthash:8].css'\n    })\n]\n```\n3、hash，设置file-loader的name\n```javaScript\n{\n    test:/\\.(png|jpg|gif|jpeg)$/,\n    use: {\n        loader: 'file-loader',\n        options: {\n            name: 'img/[name][hash:8].[ext]'\n        }\n    }\n}\n```\n\n## 代码压缩\n### 1. JS文件压缩\n内置`uglifyjs-webpack-plugin`(默认打包出来是已压缩)\n\n### 2. CSS文件压缩\n使用`optimize-css-assets-webpack-plugin`，同时使用`cssnano`\n\n首先安装`optimize-css-assets-webpack-plugin`\n```\nnpm i optimize-css-assets-webpack-plugin -D\n```\nor\n```\nyarn add optimize-css-assets-webpack-plugin -D\n```\n其次安装`cssnano`\n```\nnpm i cssnano -D\n```\nor\n```\nyarn add cssnano -D\n```\n修改`webpack.config.js`\n```javaScript\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin'); // 先引入插件\n\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name]_[contenthash:8].css'\n    }),\n    // 设置插件内容\n    new OptimizeCSSAssetsPlugin ({\n        assetNameRegExp: /\\.css$/g,\n        cssProcessor: require('cssnano')\n    })\n]\n```\n\n### 3. HTML文件压缩\n`html-webpack-plugin`，设置压缩参数\n首先安装`html-webpack-plugin`\n```\nnpm i html-webpack-plugin -D\n```\nor\n```\nyarn add html-webpack-plugin -D\n```\n修改`webpack.config.js`\n```javaScript\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: '[name]_[contenthash:8].css'\n    }),\n    new OptimizeCSSAssetsPlugin ({\n        assetNameRegExp: /\\.css$/g,\n        cssProcessor: require('cssnano')\n    }),\n    // 以下为新增内容，现在src下创建两个html文件\n    new HtmlWebpackPlugin ({\n        template: path.join(__dirname, 'src/search.html'),\n        filename: 'search.html',\n        chunks: ['search'],\n        inject: true,\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    }),\n    new HtmlWebpackPlugin ({\n        template: path.join(__dirname, 'src/index.html'),\n        filename: 'index.html',\n        chunks: ['index'],\n        inject: true,\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    })\n]\n```\n","slug":"webpack入门","published":1,"updated":"2021-11-19T03:53:34.044Z","_id":"ckw5ukxaa0000h8vc02vqf2aj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"初始化一个简单的package-json\"><a href=\"#初始化一个简单的package-json\" class=\"headerlink\" title=\"初始化一个简单的package.json\"></a>初始化一个简单的package.json</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例子引入\"><a href=\"#例子引入\" class=\"headerlink\" title=\"例子引入\"></a>例子引入</h2><p>1、 在上面的环境安装好之后，在当前文件夹下创建<code>webpack.config.js</code>，此文件是webpack的配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、从上面代码的字面意思，<code>entry</code>是入口文件的路径，output应该是和输出相关。接下来我们在当前文件夹下创建src/index.js文件并且写入以下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>然后在最外层文件夹下创建dist文件夹。</p>\n<p>3、我们在package.json文件中scripts添加下面的代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span> <span class=\"comment\">// 此为要添加的，原理：模块局部安装在node_modules/.bin目录创建软链接</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、我们在终端运行指令<code>npm run webpack</code>，就可以在dist文件夹下看到我们打包好的文件。</p>\n<p>以上是一个简单的webpack打包的例子，接下来我们深入了解</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"1-entry\"><a href=\"#1-entry\" class=\"headerlink\" title=\"1. entry\"></a>1. entry</h3><p>::: tip 概念<br>entry 指定webpack打包入口（源代码）<br>:::<br>（1）单入口时是字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>（2）多入口时是对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">adminApp</span>: <span class=\"string\">&#x27;./src/adminApp.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-output\"><a href=\"#2-output\" class=\"headerlink\" title=\"2.output\"></a>2.output</h3><p>::: tip 概念<br>Output 用来告诉webpack如何将编译后的文件输出到磁盘（webpack打包结果代码）<br>:::<br>（1）单入口配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>(2) 多入口配置 （通过占位符确保文件名称唯一）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-loaders\"><a href=\"#3-loaders\" class=\"headerlink\" title=\"3. loaders\"></a>3. loaders</h3><p>::: tip 概念<br>webpack开箱即用只支持js和json两种文件类型，通过Loader可以支持其他文件类型并且把他们转换为有效的模块，添加到依赖图中。<br>Loader本身是一个函数，接受源文件为参数，返回转换结果。<br>:::</p>\n<h4 id=\"常用的Loaders\"><a href=\"#常用的Loaders\" class=\"headerlink\" title=\"常用的Loaders\"></a>常用的Loaders</h4><ol>\n<li><p>babel-loader<br>转换ES6、ES7等JS新特性的语法</p>\n</li>\n<li><p>css-loader<br>支持.css文件的加载和解析</p>\n</li>\n<li><p>less-loader<br>将less文件转换成css</p>\n</li>\n<li><p>ts-loader<br>将TS转换为JS</p>\n</li>\n<li><p>file-loader<br>进行图片、文字等的打包</p>\n</li>\n<li><p>raw-loader<br>将文件以字符串的形式导入</p>\n</li>\n<li><p>thread-loader<br>多进程打包JS和CSS (提高打包速度)</p>\n</li>\n</ol>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>,  <span class=\"comment\">// 指定匹配规则</span></span><br><span class=\"line\">                use: <span class=\"string\">&#x27;raw-loader&#x27;</span> <span class=\"comment\">// 指定使用loader名称</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-plugins\"><a href=\"#4-plugins\" class=\"headerlink\" title=\"4. plugins\"></a>4. plugins</h3><p>::: tip 概念<br>插件用于bundle文件的优化，资源管理和环境变量注入<br>作用于整个构建过程<br>:::</p>\n<h4 id=\"常用plugins\"><a href=\"#常用plugins\" class=\"headerlink\" title=\"常用plugins\"></a>常用plugins</h4><ol>\n<li><p>CommonsChunkPlugin 将chunks相同的模块代码提取成公共的js</p>\n</li>\n<li><p>CleanWebpackPlugin 清理构建目录</p>\n</li>\n<li><p>ExtractTextWebpackPlugin 将CSS从bundle文件里提取成一个独立的css文件</p>\n</li>\n<li><p>CopyWebpackPlugin 将文件或者文件夹拷贝到构建的输出目录</p>\n</li>\n<li><p>HtmlWebpackPlugin 创建html文件去承载输出的bundle</p>\n</li>\n<li><p>UglifyjsWebpackPlugin 压缩js</p>\n</li>\n<li><p>ZipWebpackPlugin 将打包出的资源生成一个zip包</p>\n</li>\n</ol>\n<h4 id=\"用法-放plugins数组里\"><a href=\"#用法-放plugins数组里\" class=\"headerlink\" title=\"用法 (放plugins数组里)\"></a>用法 (放plugins数组里)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-mode\"><a href=\"#5-mode\" class=\"headerlink\" title=\"5.mode\"></a>5.mode</h3><p>::: tip 概念<br>Mode 指定当前构建环境是: production（生产环境）、development（开发阶段）还是none<br>设置 mode 可以使用wenpack内置函数，默认为priduction (wp4新概念)<br>:::</p>\n<h4 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h4><ol>\n<li><p>development<br>设置<code>process.env.NODE_ENV</code>的值为<code>development</code>，开启<code>NamedChunksPlugin</code>和<code>NamedModulesPlugin</code>。</p>\n</li>\n<li><p>production<br>设置<code>process.env.NODE_ENV</code>的值为<code>production</code>，开启<code>FlagDependencyUsagePlugin</code>,<code>FlagIncludedChunksPlugin</code>,<code>ModuleConcatenationPlugin</code>,<code>NoEmitOnErrorsPlugin</code>,<code>OccurrenceOrderPlugin</code>,<code>SideEffectsFlagPlugin</code>,<code>TerserPlugin</code>。</p>\n</li>\n<li><p>none<br>不开启任何优化选项</p>\n</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"1-解析ES6（使用babel）\"><a href=\"#1-解析ES6（使用babel）\" class=\"headerlink\" title=\"1. 解析ES6（使用babel）\"></a>1. 解析ES6（使用babel）</h3><p>安装babel</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/core @babel/preset-env babel-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/core @babel/preset-env babel-loader -D</span><br></pre></td></tr></table></figure>\n<p>首先使用<code>babel-loader</code>,在webpack配置文件中添加此loader</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用babel配置文件，创建<code>.babelrc</code>，添加babel preset配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-解析React-JSX\"><a href=\"#2-解析React-JSX\" class=\"headerlink\" title=\"2.解析React JSX\"></a>2.解析React JSX</h3><p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react react-dom @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react react-dom @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n<p>在上面的基础上，在.babelrc增加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-react&quot;</span> <span class=\"comment\">// 新增React 的 babel preset配置</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们修改我们的src/search.js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Search</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Search Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDom.render(</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Search</span> /&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-解析css\"><a href=\"#3-解析css\" class=\"headerlink\" title=\"3.解析css\"></a>3.解析css</h3><p>css-loader用于加载.css文件，并且转换成commonjs对象</p>\n<p>style-loader 将样式通过style标签插入到head中<br>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>添加Loader:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中使用import引入css文件，我们构建之后可以发现样式是生效的。</p>\n<h3 id=\"4-解析Less和SaSS\"><a href=\"#4-解析Less和SaSS\" class=\"headerlink\" title=\"4. 解析Less和SaSS\"></a>4. 解析Less和SaSS</h3><p>less-loader用于将less转换为css.</p>\n<p>首先我们安装Less和less-loader</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i less less-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add less less-loader -D</span><br></pre></td></tr></table></figure>\n<p><code>webpack.config.js</code>添加<code>less-loader</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、解析图片或字体\"><a href=\"#5、解析图片或字体\" class=\"headerlink\" title=\"5、解析图片或字体\"></a>5、解析图片或字体</h3><p>解析图片需要用到<code>file-loader</code>用于处理文件</p>\n<p>首先我们需要在项目中安装<code>file-loader</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i file-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add file-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>中引入<code>file-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而后我们就可以在项目中引用图片文件在最后构建的时候也能够成功</p>\n<p>解析字体也可以用<code>file-loader</code>处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了使用<code>file-loader</code>解析之外，我们还可以使用<code>url-loader</code>，可以设置较小资源自动base64</p>\n<p>使用前先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i url-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add url-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">limit</span>: <span class=\"number\">10240</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是几个常用的loader的用法</p>\n<h2 id=\"webpack文件监听\"><a href=\"#webpack文件监听\" class=\"headerlink\" title=\"webpack文件监听\"></a>webpack文件监听</h2><p>::: tip 概念<br>文件监听是发现源码发生变化时，自动重新构建出新的输出文件。<br>:::<br>webpack开启监听模式，有两种方式：</p>\n<ol>\n<li>启动webpack命令时，带上–watch参数；(唯一缺陷：每次需手动刷新浏览器)<br>修改package.json文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;webpack --watch&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在配置<code>webpack.config.js</code>中设置<code>watch:true</code>；</li>\n</ol>\n<h3 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h3><p>轮询判断文件的最后编辑时间是否变化</p>\n<p>某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认false，也就是不开启</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 只有当watch:true时，watchOptions才有意义</span></span><br><span class=\"line\">    <span class=\"attr\">watchOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认为空，不监听的文件或者文件夹，支持正则匹配</span></span><br><span class=\"line\">        <span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 监听到变化发生后会等300ms再执行，默认为300ms</span></span><br><span class=\"line\">        aggregateTimeout: <span class=\"number\">300</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 判断文件是否发生变化时通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次</span></span><br><span class=\"line\">        <span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><h3 id=\"1-webpack-dev-server\"><a href=\"#1-webpack-dev-server\" class=\"headerlink\" title=\"1. webpack-dev-server\"></a>1. webpack-dev-server</h3><p>:::tip 特点<br>WDS不刷新浏览器；不输出文件，而是放在内存中；使用HotModuleReplacementPlugin插件<br>:::<br>首先需要安装<code>webpack-dev-server</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<p>然后修改<code>package.json</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;webpack --watch&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --open&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好之后，我们修改<code>webpack.config.js</code>配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>, <span class=\"comment\">// 修改环境</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">limit</span>: <span class=\"number\">10240</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;./dist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>  <span class=\"comment\">// webpack文档表明配置了此会自动引入这个插件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们执行<code>npm run dev</code>命令，就可以实现代码热更新</p>\n<h3 id=\"2-webpack-dev-middleware\"><a href=\"#2-webpack-dev-middleware\" class=\"headerlink\" title=\"2. webpack-dev-middleware\"></a>2. webpack-dev-middleware</h3><p>:::tip 特点<br>WDM 将webpack输出的文件传输给服务器，适用于灵活的定制场景<br>:::</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: config.output.publicPath</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Example app listening on port 3000!\\n&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"热更新的原理\"><a href=\"#热更新的原理\" class=\"headerlink\" title=\"热更新的原理\"></a>热更新的原理</h3><p>1、Webpack Compile: 将JS编译成Bundle;</p>\n<p>2、HMR Server: 将热更新的文件输出给HMR Runtime;</p>\n<p>3、Bundle Server: 提供文件在浏览器访问;</p>\n<p>4、HMR Runtime: 会被注入到浏览器，更新文件变化;（桥）</p>\n<p>5、bundle.js: 构建输出文件</p>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><p>:::tip 概念<br>打包后输出的文件名的后缀，好处：版本管理<br>:::</p>\n<h3 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h3><ol>\n<li><p>Hash: 和整个项目的构建相关，只要项目文件有修改，整个项目构建的hash值就会改变；</p>\n</li>\n<li><p>Chunkhash: 和webpack打包的chunk有关，不同的entry会生成不同的chunkhash值；</p>\n</li>\n<li><p>Contenthash: 根据文件内容来定义hash, 文件内容不变，则contenthash不变（css文件）</p>\n</li>\n</ol>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>1、chunkhash: 设置output的filename</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、contenthash</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3、hash，设置file-loader的name</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name][hash:8].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h2><h3 id=\"1-JS文件压缩\"><a href=\"#1-JS文件压缩\" class=\"headerlink\" title=\"1. JS文件压缩\"></a>1. JS文件压缩</h3><p>内置<code>uglifyjs-webpack-plugin</code>(默认打包出来是已压缩)</p>\n<h3 id=\"2-CSS文件压缩\"><a href=\"#2-CSS文件压缩\" class=\"headerlink\" title=\"2. CSS文件压缩\"></a>2. CSS文件压缩</h3><p>使用<code>optimize-css-assets-webpack-plugin</code>，同时使用<code>cssnano</code></p>\n<p>首先安装<code>optimize-css-assets-webpack-plugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>其次安装<code>cssnano</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cssnano -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add cssnano -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>); <span class=\"comment\">// 先引入插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 设置插件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-HTML文件压缩\"><a href=\"#3-HTML文件压缩\" class=\"headerlink\" title=\"3. HTML文件压缩\"></a>3. HTML文件压缩</h3><p><code>html-webpack-plugin</code>，设置压缩参数<br>首先安装<code>html-webpack-plugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 以下为新增内容，现在src下创建两个html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">&#x27;src/search.html&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;search.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;search&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">&#x27;src/index.html&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;index&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h3 id=\"初始化一个简单的package-json\"><a href=\"#初始化一个简单的package-json\" class=\"headerlink\" title=\"初始化一个简单的package.json\"></a>初始化一个简单的package.json</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"例子引入\"><a href=\"#例子引入\" class=\"headerlink\" title=\"例子引入\"></a>例子引入</h2><p>1、 在上面的环境安装好之后，在当前文件夹下创建<code>webpack.config.js</code>，此文件是webpack的配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、从上面代码的字面意思，<code>entry</code>是入口文件的路径，output应该是和输出相关。接下来我们在当前文件夹下创建src/index.js文件并且写入以下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>然后在最外层文件夹下创建dist文件夹。</p>\n<p>3、我们在package.json文件中scripts添加下面的代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span> <span class=\"comment\">// 此为要添加的，原理：模块局部安装在node_modules/.bin目录创建软链接</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、我们在终端运行指令<code>npm run webpack</code>，就可以在dist文件夹下看到我们打包好的文件。</p>\n<p>以上是一个简单的webpack打包的例子，接下来我们深入了解</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"1-entry\"><a href=\"#1-entry\" class=\"headerlink\" title=\"1. entry\"></a>1. entry</h3><p>::: tip 概念<br>entry 指定webpack打包入口（源代码）<br>:::<br>（1）单入口时是字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>（2）多入口时是对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">adminApp</span>: <span class=\"string\">&#x27;./src/adminApp.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-output\"><a href=\"#2-output\" class=\"headerlink\" title=\"2.output\"></a>2.output</h3><p>::: tip 概念<br>Output 用来告诉webpack如何将编译后的文件输出到磁盘（webpack打包结果代码）<br>:::<br>（1）单入口配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>(2) 多入口配置 （通过占位符确保文件名称唯一）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">&#x27;/dist&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-loaders\"><a href=\"#3-loaders\" class=\"headerlink\" title=\"3. loaders\"></a>3. loaders</h3><p>::: tip 概念<br>webpack开箱即用只支持js和json两种文件类型，通过Loader可以支持其他文件类型并且把他们转换为有效的模块，添加到依赖图中。<br>Loader本身是一个函数，接受源文件为参数，返回转换结果。<br>:::</p>\n<h4 id=\"常用的Loaders\"><a href=\"#常用的Loaders\" class=\"headerlink\" title=\"常用的Loaders\"></a>常用的Loaders</h4><ol>\n<li><p>babel-loader<br>转换ES6、ES7等JS新特性的语法</p>\n</li>\n<li><p>css-loader<br>支持.css文件的加载和解析</p>\n</li>\n<li><p>less-loader<br>将less文件转换成css</p>\n</li>\n<li><p>ts-loader<br>将TS转换为JS</p>\n</li>\n<li><p>file-loader<br>进行图片、文字等的打包</p>\n</li>\n<li><p>raw-loader<br>将文件以字符串的形式导入</p>\n</li>\n<li><p>thread-loader<br>多进程打包JS和CSS (提高打包速度)</p>\n</li>\n</ol>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.txt$/</span>,  <span class=\"comment\">// 指定匹配规则</span></span><br><span class=\"line\">                use: <span class=\"string\">&#x27;raw-loader&#x27;</span> <span class=\"comment\">// 指定使用loader名称</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-plugins\"><a href=\"#4-plugins\" class=\"headerlink\" title=\"4. plugins\"></a>4. plugins</h3><p>::: tip 概念<br>插件用于bundle文件的优化，资源管理和环境变量注入<br>作用于整个构建过程<br>:::</p>\n<h4 id=\"常用plugins\"><a href=\"#常用plugins\" class=\"headerlink\" title=\"常用plugins\"></a>常用plugins</h4><ol>\n<li><p>CommonsChunkPlugin 将chunks相同的模块代码提取成公共的js</p>\n</li>\n<li><p>CleanWebpackPlugin 清理构建目录</p>\n</li>\n<li><p>ExtractTextWebpackPlugin 将CSS从bundle文件里提取成一个独立的css文件</p>\n</li>\n<li><p>CopyWebpackPlugin 将文件或者文件夹拷贝到构建的输出目录</p>\n</li>\n<li><p>HtmlWebpackPlugin 创建html文件去承载输出的bundle</p>\n</li>\n<li><p>UglifyjsWebpackPlugin 压缩js</p>\n</li>\n<li><p>ZipWebpackPlugin 将打包出的资源生成一个zip包</p>\n</li>\n</ol>\n<h4 id=\"用法-放plugins数组里\"><a href=\"#用法-放plugins数组里\" class=\"headerlink\" title=\"用法 (放plugins数组里)\"></a>用法 (放plugins数组里)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-mode\"><a href=\"#5-mode\" class=\"headerlink\" title=\"5.mode\"></a>5.mode</h3><p>::: tip 概念<br>Mode 指定当前构建环境是: production（生产环境）、development（开发阶段）还是none<br>设置 mode 可以使用wenpack内置函数，默认为priduction (wp4新概念)<br>:::</p>\n<h4 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h4><ol>\n<li><p>development<br>设置<code>process.env.NODE_ENV</code>的值为<code>development</code>，开启<code>NamedChunksPlugin</code>和<code>NamedModulesPlugin</code>。</p>\n</li>\n<li><p>production<br>设置<code>process.env.NODE_ENV</code>的值为<code>production</code>，开启<code>FlagDependencyUsagePlugin</code>,<code>FlagIncludedChunksPlugin</code>,<code>ModuleConcatenationPlugin</code>,<code>NoEmitOnErrorsPlugin</code>,<code>OccurrenceOrderPlugin</code>,<code>SideEffectsFlagPlugin</code>,<code>TerserPlugin</code>。</p>\n</li>\n<li><p>none<br>不开启任何优化选项</p>\n</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"1-解析ES6（使用babel）\"><a href=\"#1-解析ES6（使用babel）\" class=\"headerlink\" title=\"1. 解析ES6（使用babel）\"></a>1. 解析ES6（使用babel）</h3><p>安装babel</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/core @babel/preset-env babel-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/core @babel/preset-env babel-loader -D</span><br></pre></td></tr></table></figure>\n<p>首先使用<code>babel-loader</code>,在webpack配置文件中添加此loader</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用babel配置文件，创建<code>.babelrc</code>，添加babel preset配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-解析React-JSX\"><a href=\"#2-解析React-JSX\" class=\"headerlink\" title=\"2.解析React JSX\"></a>2.解析React JSX</h3><p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react react-dom @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react react-dom @babel/preset-react -D</span><br></pre></td></tr></table></figure>\n<p>在上面的基础上，在.babelrc增加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-react&quot;</span> <span class=\"comment\">// 新增React 的 babel preset配置</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后我们修改我们的src/search.js文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Search</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Search Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDom.render(</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Search</span> /&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-解析css\"><a href=\"#3-解析css\" class=\"headerlink\" title=\"3.解析css\"></a>3.解析css</h3><p>css-loader用于加载.css文件，并且转换成commonjs对象</p>\n<p>style-loader 将样式通过style标签插入到head中<br>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>添加Loader:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码中使用import引入css文件，我们构建之后可以发现样式是生效的。</p>\n<h3 id=\"4-解析Less和SaSS\"><a href=\"#4-解析Less和SaSS\" class=\"headerlink\" title=\"4. 解析Less和SaSS\"></a>4. 解析Less和SaSS</h3><p>less-loader用于将less转换为css.</p>\n<p>首先我们安装Less和less-loader</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i less less-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add less less-loader -D</span><br></pre></td></tr></table></figure>\n<p><code>webpack.config.js</code>添加<code>less-loader</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、解析图片或字体\"><a href=\"#5、解析图片或字体\" class=\"headerlink\" title=\"5、解析图片或字体\"></a>5、解析图片或字体</h3><p>解析图片需要用到<code>file-loader</code>用于处理文件</p>\n<p>首先我们需要在项目中安装<code>file-loader</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i file-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add file-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>在<code>webpack.config.js</code>中引入<code>file-loader</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而后我们就可以在项目中引用图片文件在最后构建的时候也能够成功</p>\n<p>解析字体也可以用<code>file-loader</code>处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了使用<code>file-loader</code>解析之外，我们还可以使用<code>url-loader</code>，可以设置较小资源自动base64</p>\n<p>使用前先安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i url-loader -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add url-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">limit</span>: <span class=\"number\">10240</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是几个常用的loader的用法</p>\n<h2 id=\"webpack文件监听\"><a href=\"#webpack文件监听\" class=\"headerlink\" title=\"webpack文件监听\"></a>webpack文件监听</h2><p>::: tip 概念<br>文件监听是发现源码发生变化时，自动重新构建出新的输出文件。<br>:::<br>webpack开启监听模式，有两种方式：</p>\n<ol>\n<li>启动webpack命令时，带上–watch参数；(唯一缺陷：每次需手动刷新浏览器)<br>修改package.json文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;webpack --watch&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在配置<code>webpack.config.js</code>中设置<code>watch:true</code>；</li>\n</ol>\n<h3 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h3><p>轮询判断文件的最后编辑时间是否变化</p>\n<p>某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认false，也就是不开启</span></span><br><span class=\"line\">    <span class=\"attr\">watch</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 只有当watch:true时，watchOptions才有意义</span></span><br><span class=\"line\">    <span class=\"attr\">watchOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认为空，不监听的文件或者文件夹，支持正则匹配</span></span><br><span class=\"line\">        <span class=\"attr\">ignored</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 监听到变化发生后会等300ms再执行，默认为300ms</span></span><br><span class=\"line\">        aggregateTimeout: <span class=\"number\">300</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 判断文件是否发生变化时通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次</span></span><br><span class=\"line\">        <span class=\"attr\">poll</span>: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><h3 id=\"1-webpack-dev-server\"><a href=\"#1-webpack-dev-server\" class=\"headerlink\" title=\"1. webpack-dev-server\"></a>1. webpack-dev-server</h3><p>:::tip 特点<br>WDS不刷新浏览器；不输出文件，而是放在内存中；使用HotModuleReplacementPlugin插件<br>:::<br>首先需要安装<code>webpack-dev-server</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<p>然后修改<code>package.json</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;webpack --watch&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --open&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好之后，我们修改<code>webpack.config.js</code>配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>, <span class=\"comment\">// 修改环境</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"comment\">// 链式调用，顺序从右到左</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    <span class=\"string\">&#x27;style-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">limit</span>: <span class=\"number\">10240</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;./dist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>  <span class=\"comment\">// webpack文档表明配置了此会自动引入这个插件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们执行<code>npm run dev</code>命令，就可以实现代码热更新</p>\n<h3 id=\"2-webpack-dev-middleware\"><a href=\"#2-webpack-dev-middleware\" class=\"headerlink\" title=\"2. webpack-dev-middleware\"></a>2. webpack-dev-middleware</h3><p>:::tip 特点<br>WDM 将webpack输出的文件传输给服务器，适用于灵活的定制场景<br>:::</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: config.output.publicPath</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Example app listening on port 3000!\\n&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"热更新的原理\"><a href=\"#热更新的原理\" class=\"headerlink\" title=\"热更新的原理\"></a>热更新的原理</h3><p>1、Webpack Compile: 将JS编译成Bundle;</p>\n<p>2、HMR Server: 将热更新的文件输出给HMR Runtime;</p>\n<p>3、Bundle Server: 提供文件在浏览器访问;</p>\n<p>4、HMR Runtime: 会被注入到浏览器，更新文件变化;（桥）</p>\n<p>5、bundle.js: 构建输出文件</p>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><p>:::tip 概念<br>打包后输出的文件名的后缀，好处：版本管理<br>:::</p>\n<h3 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h3><ol>\n<li><p>Hash: 和整个项目的构建相关，只要项目文件有修改，整个项目构建的hash值就会改变；</p>\n</li>\n<li><p>Chunkhash: 和webpack打包的chunk有关，不同的entry会生成不同的chunkhash值；</p>\n</li>\n<li><p>Contenthash: 根据文件内容来定义hash, 文件内容不变，则contenthash不变（css文件）</p>\n</li>\n</ol>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>1、chunkhash: 设置output的filename</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">search</span>: <span class=\"string\">&#x27;./src/search.js&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、contenthash</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name][contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3、hash，设置file-loader的name</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use: &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name][hash:8].[ext]&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h2><h3 id=\"1-JS文件压缩\"><a href=\"#1-JS文件压缩\" class=\"headerlink\" title=\"1. JS文件压缩\"></a>1. JS文件压缩</h3><p>内置<code>uglifyjs-webpack-plugin</code>(默认打包出来是已压缩)</p>\n<h3 id=\"2-CSS文件压缩\"><a href=\"#2-CSS文件压缩\" class=\"headerlink\" title=\"2. CSS文件压缩\"></a>2. CSS文件压缩</h3><p>使用<code>optimize-css-assets-webpack-plugin</code>，同时使用<code>cssnano</code></p>\n<p>首先安装<code>optimize-css-assets-webpack-plugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>其次安装<code>cssnano</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cssnano -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add cssnano -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>); <span class=\"comment\">// 先引入插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 设置插件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-HTML文件压缩\"><a href=\"#3-HTML文件压缩\" class=\"headerlink\" title=\"3. HTML文件压缩\"></a>3. HTML文件压缩</h3><p><code>html-webpack-plugin</code>，设置压缩参数<br>首先安装<code>html-webpack-plugin</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>修改<code>webpack.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 以下为新增内容，现在src下创建两个html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">&#x27;src/search.html&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;search.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;search&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">&#x27;src/index.html&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"string\">&#x27;index&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"webpack构建速度及体积优化","date":"2021-11-19T03:54:42.000Z","_content":"\n# webpack构建速度及体积优化\n\n## 分析（初级）-使用webpack内置的stats\n\n::: tip 引入\n\nstats: 构建的统计信息\n\n缺点：颗粒度太粗，看不出问题在哪\n:::\n\n### stats 使用\n\n`package.json`中使用`stats`\n\n```javaScript\n\"scripts\": {\n    \"build:stats\": \"webpack --env production --json > stats.json\",\n    ...\n}\n```\n\n## 分析（速度）-使用 [speed-measure-webpack-plugin](https://github.com/stephencookdev/speed-measure-webpack-plugin)\n\n::: tip 特点\n\n1. 分析整个打包总耗时\n\n2. 每个插件和loader的耗时情况\n\n:::\n\n### 插件使用\n\n1. 安装\n\n    ```javaScript\n    npm i --save-dev speed-measure-webpack-plugin\n    ```\n\n    or\n\n    ```javaScript\n    yarn add speed-measure-webpack-plugin --save-dev\n    ```\n\n2. 接入\n\n    在webpack配置文件中引入`speed-measure-webpack-plugin`;\n\n    ```javaScript\n    const speedMeasureWebpackPlugin = require('speed-measure-webpack-plugin');\n    ...\n    const smp = new speedMeasureWebpackPlugin();\n    ...\n    module.exports = smp.wrap({\n        ...\n    });\n    ```\n\n    像上面的例子一样，使用插件中的`wrap`方法将内容包裹起来，在打包完成之后就能看到模块间的时间。\n\n<a data-fancybox title=\"速度分析\" href=\"https://img-blog.csdnimg.cn/2020042710203448.png\">![速度分析](https://img-blog.csdnimg.cn/2020042710203448.png)</a>\n\n## 分析（体积）-使用 [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer)\n\n::: tip 作用\n\n1. 依赖的第三方模块文件大小\n\n2. 业务里面的组件代码大小\n\n:::\n\n1. 安装\n\n    ```javaScript\n    npm i webpack-bundle-analyzer -D\n    ```\n\n    or\n\n    ```javaScript\n    yarn add webpack-bundle-analyzer -D\n    ```\n\n2. 接入\n\n    在webpack配置文件中引入`webpack-bundle-analyzer`;\n\n    ```javaScript\n    const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\n    ...\n    module.exports = smp.wrap({\n        ...\n        plugins: [\n            ...\n            new BundleAnalyzerPlugin ()\n        ]\n    });\n    ```\n\n在构建完成之后可以访问本地8888端口（默认可修改），查看当前项目文件的体积关系\n\n## 优化（速度）-使用 高版本的 webpack 和 Node.js\n\n## 优化（速度）-多进程/多实例构建\n\n::: tip 可选方案\n\n1. thread-loader\n\n2. parallel-webpack\n\n3. HappyPack\n\n:::\n\n### 使用 [HappyPack](https://github.com/amireh/happypack) 解析资源\n\n::: tip 原理\n每次 webpack 解析一个模块，HappyPack 会将它及它的依赖分配给 worker 线程中\n\n:::\n\n### 使用 [thread-loader](https://github.com/webpack-contrib/thread-loader) 解析资源\n\n::: tip 原理\n每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给worker线程中\n:::\n\n## 优化（体积）-多进程/多实例：并行压缩\n\n1. 使用 [parallel-uglify-plugin](https://github.com/gdborton/webpack-parallel-uglify-plugin) 插件\n\n2. [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) 开启 `parallel` 参数 （webpack 4 版本之前）\n\n3. [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin) 开启 `parallel` 参数 （webpack 4 版本之后）\n\n## 进一步分包\n\n### 设置 Externals (初级)\n\n::: tip 思路\n将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中\n\n方法: 使用 html-webpack-externals-plugin\n:::\n\n### 预编译资源模块 (高级)\n\n::: tip 思路\n\n思路：将 react、react-dom、redux、react-redux 基础包和业务基础包打包成一个文件\n\n方法：使用 DLLPlugin 进行分包， DIIReferencePlugin 对 manifest.json 引用\n\n:::\n\n1. 创建`webpack.dll.js`文件\n\n    ```javaScript\n    const path = require('path');\n    const webpack = require('webpack');\n\n    module.exports = {\n        entry: {\n            // 基础包\n            library: [\n                'react',\n                'react-dom',\n            ]\n            // 如果还有其他类可以在这里加一个键和对象\n        },\n        output: {\n            filename: '[name]_[chunkhash].dll.js',\n            path: path.join(__dirname, 'build/library'),\n            library: '[name]'\n        },\n        plugins: [\n            new webpack.DllPlugin({\n                name: '[name]_[hash]',\n                path: path.join(__dirname, 'build/library/[name].json')\n            })\n        ]\n    }\n    ```\n\n    文件用于分包，将一些基础包进行分离\n\n2. 引入分离包\n\n    首先可以在`package.json`中的`scripts`添加一项\n\n    ```javaScript\n        \"scripts\": {\n            \"dll\": \"webpack --config webpack.dll.js\"\n        }\n    ```\n\n    然后在打包配置文件中增加：\n\n    ```javaScript\n        const webpack = require('webpack');\n        ...\n        module.exports = {\n            ...\n            plugins: [\n                ...\n                new webpack.DllReferencePlugin({\n                    manifest: require('./build/library/library.json')\n                })\n            ]\n        };\n    ```\n\n## 利用缓存提高二次构建速度\n\n::: tip 缓存思路\n\n1. babel-loader 开启缓存\n\n2. terser-webpack-plugin 开启缓存\n\n    ```javaScript\n        optimization: {\n            minimizer: [\n                new TerserPlugin({\n                    parallel: true,\n                    cache: true\n                })\n            ],\n        }\n    ```\n\n3. 使用 cache-loader 或者 hard-source-webpack-plugin\n\n:::\n\n## 缩小构建目标\n\n### 减少文件搜索范围\n\n1. 优化 resolve.modules 配置 （减少模块搜索层级）\n\n2. 优化 resolve.mainFields 配置\n\n3. 优化 resolve.extensions 配置\n\n4. 合理使用 alias\n\n## 使用 Tree Shaking 擦除无用的JavaScript和CSS\n\n### 无用的CSS如何删除掉\n\n1. PurifyCSS: 遍历代码，识别已经用到的 CSS class\n\n    如何在 webpack 中使用 PurifyCSS\n\n    ::: tip 提示\n        使用 `purgecss-webpack-plugin` 和 `mini-css-extract-plugin` 配合使用\n    :::\n\n    (1) 安装\n\n    ```javaScript\n        npm i purgecss-webpack-plugin -D\n    ```\n\n    or\n\n    ```javaScript\n        yarn add purgecss-webpack-plugin -D\n    ```\n\n    在webpack配置文件中使用：\n\n    ```javaScript\n    const PurgecssPlugin = require('purgecss-webpack-plugin');\n    ...\n    const PATHS = {\n        src: path.join(__dirname, 'src')\n    };\n    ...\n    plugins: [\n        new PurgecssPlugin ({\n            // 这里的glob类似我们之前那种多页面打包的方式获取对应文件\n            paths: glob.sync(`${PATHS.src}/**/*`, { nodir: true }),\n        })\n    ]\n    ```\n\n    [purgecss-webpack-plugin](https://github.com/FullHuman/purgecss/tree/master/packages/purgecss-webpack-plugin)\n\n2. uncss: HTML 需要通过 jsdom 加载，所有的样式通过 PostCSS 解析，通过 document.querySelector 来识别在 html 文件里面不存在的选择器\n\n## 使用webpack进行图片压缩\n\n::: tip 提示\n要求：基于Node库的 `imagemin` 或者 `tinypng` API\n\n使用：配置 [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)\n:::\n\n::: tip Imagemin 的优点分析\n1. 有很多定制选项\n\n2. 可以引入更多第三方优化插件，例如pngquart\n\n3. 可以处理多种图片格式\n:::\n\n## 使用Polyfill\n\n\n","source":"_posts/webpack构建速度及体积优化.md","raw":"---\ntitle: webpack构建速度及体积优化\ndate: 2021-11-19 11:54:42\ntags:\n---\n\n# webpack构建速度及体积优化\n\n## 分析（初级）-使用webpack内置的stats\n\n::: tip 引入\n\nstats: 构建的统计信息\n\n缺点：颗粒度太粗，看不出问题在哪\n:::\n\n### stats 使用\n\n`package.json`中使用`stats`\n\n```javaScript\n\"scripts\": {\n    \"build:stats\": \"webpack --env production --json > stats.json\",\n    ...\n}\n```\n\n## 分析（速度）-使用 [speed-measure-webpack-plugin](https://github.com/stephencookdev/speed-measure-webpack-plugin)\n\n::: tip 特点\n\n1. 分析整个打包总耗时\n\n2. 每个插件和loader的耗时情况\n\n:::\n\n### 插件使用\n\n1. 安装\n\n    ```javaScript\n    npm i --save-dev speed-measure-webpack-plugin\n    ```\n\n    or\n\n    ```javaScript\n    yarn add speed-measure-webpack-plugin --save-dev\n    ```\n\n2. 接入\n\n    在webpack配置文件中引入`speed-measure-webpack-plugin`;\n\n    ```javaScript\n    const speedMeasureWebpackPlugin = require('speed-measure-webpack-plugin');\n    ...\n    const smp = new speedMeasureWebpackPlugin();\n    ...\n    module.exports = smp.wrap({\n        ...\n    });\n    ```\n\n    像上面的例子一样，使用插件中的`wrap`方法将内容包裹起来，在打包完成之后就能看到模块间的时间。\n\n<a data-fancybox title=\"速度分析\" href=\"https://img-blog.csdnimg.cn/2020042710203448.png\">![速度分析](https://img-blog.csdnimg.cn/2020042710203448.png)</a>\n\n## 分析（体积）-使用 [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer)\n\n::: tip 作用\n\n1. 依赖的第三方模块文件大小\n\n2. 业务里面的组件代码大小\n\n:::\n\n1. 安装\n\n    ```javaScript\n    npm i webpack-bundle-analyzer -D\n    ```\n\n    or\n\n    ```javaScript\n    yarn add webpack-bundle-analyzer -D\n    ```\n\n2. 接入\n\n    在webpack配置文件中引入`webpack-bundle-analyzer`;\n\n    ```javaScript\n    const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\n    ...\n    module.exports = smp.wrap({\n        ...\n        plugins: [\n            ...\n            new BundleAnalyzerPlugin ()\n        ]\n    });\n    ```\n\n在构建完成之后可以访问本地8888端口（默认可修改），查看当前项目文件的体积关系\n\n## 优化（速度）-使用 高版本的 webpack 和 Node.js\n\n## 优化（速度）-多进程/多实例构建\n\n::: tip 可选方案\n\n1. thread-loader\n\n2. parallel-webpack\n\n3. HappyPack\n\n:::\n\n### 使用 [HappyPack](https://github.com/amireh/happypack) 解析资源\n\n::: tip 原理\n每次 webpack 解析一个模块，HappyPack 会将它及它的依赖分配给 worker 线程中\n\n:::\n\n### 使用 [thread-loader](https://github.com/webpack-contrib/thread-loader) 解析资源\n\n::: tip 原理\n每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给worker线程中\n:::\n\n## 优化（体积）-多进程/多实例：并行压缩\n\n1. 使用 [parallel-uglify-plugin](https://github.com/gdborton/webpack-parallel-uglify-plugin) 插件\n\n2. [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) 开启 `parallel` 参数 （webpack 4 版本之前）\n\n3. [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin) 开启 `parallel` 参数 （webpack 4 版本之后）\n\n## 进一步分包\n\n### 设置 Externals (初级)\n\n::: tip 思路\n将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中\n\n方法: 使用 html-webpack-externals-plugin\n:::\n\n### 预编译资源模块 (高级)\n\n::: tip 思路\n\n思路：将 react、react-dom、redux、react-redux 基础包和业务基础包打包成一个文件\n\n方法：使用 DLLPlugin 进行分包， DIIReferencePlugin 对 manifest.json 引用\n\n:::\n\n1. 创建`webpack.dll.js`文件\n\n    ```javaScript\n    const path = require('path');\n    const webpack = require('webpack');\n\n    module.exports = {\n        entry: {\n            // 基础包\n            library: [\n                'react',\n                'react-dom',\n            ]\n            // 如果还有其他类可以在这里加一个键和对象\n        },\n        output: {\n            filename: '[name]_[chunkhash].dll.js',\n            path: path.join(__dirname, 'build/library'),\n            library: '[name]'\n        },\n        plugins: [\n            new webpack.DllPlugin({\n                name: '[name]_[hash]',\n                path: path.join(__dirname, 'build/library/[name].json')\n            })\n        ]\n    }\n    ```\n\n    文件用于分包，将一些基础包进行分离\n\n2. 引入分离包\n\n    首先可以在`package.json`中的`scripts`添加一项\n\n    ```javaScript\n        \"scripts\": {\n            \"dll\": \"webpack --config webpack.dll.js\"\n        }\n    ```\n\n    然后在打包配置文件中增加：\n\n    ```javaScript\n        const webpack = require('webpack');\n        ...\n        module.exports = {\n            ...\n            plugins: [\n                ...\n                new webpack.DllReferencePlugin({\n                    manifest: require('./build/library/library.json')\n                })\n            ]\n        };\n    ```\n\n## 利用缓存提高二次构建速度\n\n::: tip 缓存思路\n\n1. babel-loader 开启缓存\n\n2. terser-webpack-plugin 开启缓存\n\n    ```javaScript\n        optimization: {\n            minimizer: [\n                new TerserPlugin({\n                    parallel: true,\n                    cache: true\n                })\n            ],\n        }\n    ```\n\n3. 使用 cache-loader 或者 hard-source-webpack-plugin\n\n:::\n\n## 缩小构建目标\n\n### 减少文件搜索范围\n\n1. 优化 resolve.modules 配置 （减少模块搜索层级）\n\n2. 优化 resolve.mainFields 配置\n\n3. 优化 resolve.extensions 配置\n\n4. 合理使用 alias\n\n## 使用 Tree Shaking 擦除无用的JavaScript和CSS\n\n### 无用的CSS如何删除掉\n\n1. PurifyCSS: 遍历代码，识别已经用到的 CSS class\n\n    如何在 webpack 中使用 PurifyCSS\n\n    ::: tip 提示\n        使用 `purgecss-webpack-plugin` 和 `mini-css-extract-plugin` 配合使用\n    :::\n\n    (1) 安装\n\n    ```javaScript\n        npm i purgecss-webpack-plugin -D\n    ```\n\n    or\n\n    ```javaScript\n        yarn add purgecss-webpack-plugin -D\n    ```\n\n    在webpack配置文件中使用：\n\n    ```javaScript\n    const PurgecssPlugin = require('purgecss-webpack-plugin');\n    ...\n    const PATHS = {\n        src: path.join(__dirname, 'src')\n    };\n    ...\n    plugins: [\n        new PurgecssPlugin ({\n            // 这里的glob类似我们之前那种多页面打包的方式获取对应文件\n            paths: glob.sync(`${PATHS.src}/**/*`, { nodir: true }),\n        })\n    ]\n    ```\n\n    [purgecss-webpack-plugin](https://github.com/FullHuman/purgecss/tree/master/packages/purgecss-webpack-plugin)\n\n2. uncss: HTML 需要通过 jsdom 加载，所有的样式通过 PostCSS 解析，通过 document.querySelector 来识别在 html 文件里面不存在的选择器\n\n## 使用webpack进行图片压缩\n\n::: tip 提示\n要求：基于Node库的 `imagemin` 或者 `tinypng` API\n\n使用：配置 [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)\n:::\n\n::: tip Imagemin 的优点分析\n1. 有很多定制选项\n\n2. 可以引入更多第三方优化插件，例如pngquart\n\n3. 可以处理多种图片格式\n:::\n\n## 使用Polyfill\n\n\n","slug":"webpack构建速度及体积优化","published":1,"updated":"2021-11-19T03:55:19.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5unkvj000004vcbf1xe40j","content":"<h1 id=\"webpack构建速度及体积优化\"><a href=\"#webpack构建速度及体积优化\" class=\"headerlink\" title=\"webpack构建速度及体积优化\"></a>webpack构建速度及体积优化</h1><h2 id=\"分析（初级）-使用webpack内置的stats\"><a href=\"#分析（初级）-使用webpack内置的stats\" class=\"headerlink\" title=\"分析（初级）-使用webpack内置的stats\"></a>分析（初级）-使用webpack内置的stats</h2><p>::: tip 引入</p>\n<p>stats: 构建的统计信息</p>\n<p>缺点：颗粒度太粗，看不出问题在哪<br>:::</p>\n<h3 id=\"stats-使用\"><a href=\"#stats-使用\" class=\"headerlink\" title=\"stats 使用\"></a>stats 使用</h3><p><code>package.json</code>中使用<code>stats</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build:stats&quot;</span>: <span class=\"string\">&quot;webpack --env production --json &gt; stats.json&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析（速度）-使用-speed-measure-webpack-plugin\"><a href=\"#分析（速度）-使用-speed-measure-webpack-plugin\" class=\"headerlink\" title=\"分析（速度）-使用 speed-measure-webpack-plugin\"></a>分析（速度）-使用 <a href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\">speed-measure-webpack-plugin</a></h2><p>::: tip 特点</p>\n<ol>\n<li><p>分析整个打包总耗时</p>\n</li>\n<li><p>每个插件和loader的耗时情况</p>\n</li>\n</ol>\n<p>:::</p>\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev speed-measure-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add speed-measure-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>接入</p>\n<p> 在webpack配置文件中引入<code>speed-measure-webpack-plugin</code>;</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> speedMeasureWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;speed-measure-webpack-plugin&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> smp = <span class=\"keyword\">new</span> speedMeasureWebpackPlugin();</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smp.wrap(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p> 像上面的例子一样，使用插件中的<code>wrap</code>方法将内容包裹起来，在打包完成之后就能看到模块间的时间。</p>\n</li>\n</ol>\n<p><a data-fancybox title=\"速度分析\" href=\"https://img-blog.csdnimg.cn/2020042710203448.png\"><img src=\"https://img-blog.csdnimg.cn/2020042710203448.png\" alt=\"速度分析\"></a></p>\n<h2 id=\"分析（体积）-使用-webpack-bundle-analyzer\"><a href=\"#分析（体积）-使用-webpack-bundle-analyzer\" class=\"headerlink\" title=\"分析（体积）-使用 webpack-bundle-analyzer\"></a>分析（体积）-使用 <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a></h2><p>::: tip 作用</p>\n<ol>\n<li><p>依赖的第三方模块文件大小</p>\n</li>\n<li><p>业务里面的组件代码大小</p>\n</li>\n</ol>\n<p>:::</p>\n<ol>\n<li><p>安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure></li>\n<li><p>接入</p>\n<p> 在webpack配置文件中引入<code>webpack-bundle-analyzer</code>;</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smp.wrap(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin ()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在构建完成之后可以访问本地8888端口（默认可修改），查看当前项目文件的体积关系</p>\n<h2 id=\"优化（速度）-使用-高版本的-webpack-和-Node-js\"><a href=\"#优化（速度）-使用-高版本的-webpack-和-Node-js\" class=\"headerlink\" title=\"优化（速度）-使用 高版本的 webpack 和 Node.js\"></a>优化（速度）-使用 高版本的 webpack 和 Node.js</h2><h2 id=\"优化（速度）-多进程-多实例构建\"><a href=\"#优化（速度）-多进程-多实例构建\" class=\"headerlink\" title=\"优化（速度）-多进程/多实例构建\"></a>优化（速度）-多进程/多实例构建</h2><p>::: tip 可选方案</p>\n<ol>\n<li><p>thread-loader</p>\n</li>\n<li><p>parallel-webpack</p>\n</li>\n<li><p>HappyPack</p>\n</li>\n</ol>\n<p>:::</p>\n<h3 id=\"使用-HappyPack-解析资源\"><a href=\"#使用-HappyPack-解析资源\" class=\"headerlink\" title=\"使用 HappyPack 解析资源\"></a>使用 <a href=\"https://github.com/amireh/happypack\">HappyPack</a> 解析资源</h3><p>::: tip 原理<br>每次 webpack 解析一个模块，HappyPack 会将它及它的依赖分配给 worker 线程中</p>\n<p>:::</p>\n<h3 id=\"使用-thread-loader-解析资源\"><a href=\"#使用-thread-loader-解析资源\" class=\"headerlink\" title=\"使用 thread-loader 解析资源\"></a>使用 <a href=\"https://github.com/webpack-contrib/thread-loader\">thread-loader</a> 解析资源</h3><p>::: tip 原理<br>每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给worker线程中<br>:::</p>\n<h2 id=\"优化（体积）-多进程-多实例：并行压缩\"><a href=\"#优化（体积）-多进程-多实例：并行压缩\" class=\"headerlink\" title=\"优化（体积）-多进程/多实例：并行压缩\"></a>优化（体积）-多进程/多实例：并行压缩</h2><ol>\n<li><p>使用 <a href=\"https://github.com/gdborton/webpack-parallel-uglify-plugin\">parallel-uglify-plugin</a> 插件</p>\n</li>\n<li><p><a href=\"https://github.com/webpack-contrib/uglifyjs-webpack-plugin\">uglifyjs-webpack-plugin</a> 开启 <code>parallel</code> 参数 （webpack 4 版本之前）</p>\n</li>\n<li><p><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin\">terser-webpack-plugin</a> 开启 <code>parallel</code> 参数 （webpack 4 版本之后）</p>\n</li>\n</ol>\n<h2 id=\"进一步分包\"><a href=\"#进一步分包\" class=\"headerlink\" title=\"进一步分包\"></a>进一步分包</h2><h3 id=\"设置-Externals-初级\"><a href=\"#设置-Externals-初级\" class=\"headerlink\" title=\"设置 Externals (初级)\"></a>设置 Externals (初级)</h3><p>::: tip 思路<br>将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中</p>\n<p>方法: 使用 html-webpack-externals-plugin<br>:::</p>\n<h3 id=\"预编译资源模块-高级\"><a href=\"#预编译资源模块-高级\" class=\"headerlink\" title=\"预编译资源模块 (高级)\"></a>预编译资源模块 (高级)</h3><p>::: tip 思路</p>\n<p>思路：将 react、react-dom、redux、react-redux 基础包和业务基础包打包成一个文件</p>\n<p>方法：使用 DLLPlugin 进行分包， DIIReferencePlugin 对 manifest.json 引用</p>\n<p>:::</p>\n<ol>\n<li><p>创建<code>webpack.dll.js</code>文件</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基础包</span></span><br><span class=\"line\">        <span class=\"attr\">library</span>: [</span><br><span class=\"line\">            <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"comment\">// 如果还有其他类可以在这里加一个键和对象</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[chunkhash].dll.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;build/library&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">library</span>: <span class=\"string\">&#x27;[name]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;build/library/[name].json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 文件用于分包，将一些基础包进行分离</p>\n</li>\n<li><p>引入分离包</p>\n<p> 首先可以在<code>package.json</code>中的<code>scripts</code>添加一项</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dll&quot;</span>: <span class=\"string\">&quot;webpack --config webpack.dll.js&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后在打包配置文件中增加：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">manifest</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./build/library/library.json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"利用缓存提高二次构建速度\"><a href=\"#利用缓存提高二次构建速度\" class=\"headerlink\" title=\"利用缓存提高二次构建速度\"></a>利用缓存提高二次构建速度</h2><p>::: tip 缓存思路</p>\n<ol>\n<li><p>babel-loader 开启缓存</p>\n</li>\n<li><p>terser-webpack-plugin 开启缓存</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TerserPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">cache</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 cache-loader 或者 hard-source-webpack-plugin</p>\n</li>\n</ol>\n<p>:::</p>\n<h2 id=\"缩小构建目标\"><a href=\"#缩小构建目标\" class=\"headerlink\" title=\"缩小构建目标\"></a>缩小构建目标</h2><h3 id=\"减少文件搜索范围\"><a href=\"#减少文件搜索范围\" class=\"headerlink\" title=\"减少文件搜索范围\"></a>减少文件搜索范围</h3><ol>\n<li><p>优化 resolve.modules 配置 （减少模块搜索层级）</p>\n</li>\n<li><p>优化 resolve.mainFields 配置</p>\n</li>\n<li><p>优化 resolve.extensions 配置</p>\n</li>\n<li><p>合理使用 alias</p>\n</li>\n</ol>\n<h2 id=\"使用-Tree-Shaking-擦除无用的JavaScript和CSS\"><a href=\"#使用-Tree-Shaking-擦除无用的JavaScript和CSS\" class=\"headerlink\" title=\"使用 Tree Shaking 擦除无用的JavaScript和CSS\"></a>使用 Tree Shaking 擦除无用的JavaScript和CSS</h2><h3 id=\"无用的CSS如何删除掉\"><a href=\"#无用的CSS如何删除掉\" class=\"headerlink\" title=\"无用的CSS如何删除掉\"></a>无用的CSS如何删除掉</h3><ol>\n<li><p>PurifyCSS: 遍历代码，识别已经用到的 CSS class</p>\n<p> 如何在 webpack 中使用 PurifyCSS</p>\n<p> ::: tip 提示</p>\n<pre><code> 使用 `purgecss-webpack-plugin` 和 `mini-css-extract-plugin` 配合使用\n</code></pre>\n<p> :::</p>\n<p> (1) 安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p> 在webpack配置文件中使用：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PurgecssPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;purgecss-webpack-plugin&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> PATHS = &#123;</span><br><span class=\"line\">    <span class=\"attr\">src</span>: path.join(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> PurgecssPlugin (&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里的glob类似我们之前那种多页面打包的方式获取对应文件</span></span><br><span class=\"line\">        <span class=\"attr\">paths</span>: glob.sync(<span class=\"string\">`<span class=\"subst\">$&#123;PATHS.src&#125;</span>/**/*`</span>, &#123; <span class=\"attr\">nodir</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p> <a href=\"https://github.com/FullHuman/purgecss/tree/master/packages/purgecss-webpack-plugin\">purgecss-webpack-plugin</a></p>\n</li>\n<li><p>uncss: HTML 需要通过 jsdom 加载，所有的样式通过 PostCSS 解析，通过 document.querySelector 来识别在 html 文件里面不存在的选择器</p>\n</li>\n</ol>\n<h2 id=\"使用webpack进行图片压缩\"><a href=\"#使用webpack进行图片压缩\" class=\"headerlink\" title=\"使用webpack进行图片压缩\"></a>使用webpack进行图片压缩</h2><p>::: tip 提示<br>要求：基于Node库的 <code>imagemin</code> 或者 <code>tinypng</code> API</p>\n<p>使用：配置 <a href=\"https://github.com/tcoopman/image-webpack-loader\">image-webpack-loader</a><br>:::</p>\n<p>::: tip Imagemin 的优点分析</p>\n<ol>\n<li><p>有很多定制选项</p>\n</li>\n<li><p>可以引入更多第三方优化插件，例如pngquart</p>\n</li>\n<li><p>可以处理多种图片格式<br>:::</p>\n</li>\n</ol>\n<h2 id=\"使用Polyfill\"><a href=\"#使用Polyfill\" class=\"headerlink\" title=\"使用Polyfill\"></a>使用Polyfill</h2>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"webpack构建速度及体积优化\"><a href=\"#webpack构建速度及体积优化\" class=\"headerlink\" title=\"webpack构建速度及体积优化\"></a>webpack构建速度及体积优化</h1><h2 id=\"分析（初级）-使用webpack内置的stats\"><a href=\"#分析（初级）-使用webpack内置的stats\" class=\"headerlink\" title=\"分析（初级）-使用webpack内置的stats\"></a>分析（初级）-使用webpack内置的stats</h2><p>::: tip 引入</p>\n<p>stats: 构建的统计信息</p>\n<p>缺点：颗粒度太粗，看不出问题在哪<br>:::</p>\n<h3 id=\"stats-使用\"><a href=\"#stats-使用\" class=\"headerlink\" title=\"stats 使用\"></a>stats 使用</h3><p><code>package.json</code>中使用<code>stats</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;build:stats&quot;</span>: <span class=\"string\">&quot;webpack --env production --json &gt; stats.json&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析（速度）-使用-speed-measure-webpack-plugin\"><a href=\"#分析（速度）-使用-speed-measure-webpack-plugin\" class=\"headerlink\" title=\"分析（速度）-使用 speed-measure-webpack-plugin\"></a>分析（速度）-使用 <a href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\">speed-measure-webpack-plugin</a></h2><p>::: tip 特点</p>\n<ol>\n<li><p>分析整个打包总耗时</p>\n</li>\n<li><p>每个插件和loader的耗时情况</p>\n</li>\n</ol>\n<p>:::</p>\n<h3 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h3><ol>\n<li><p>安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev speed-measure-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add speed-measure-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>接入</p>\n<p> 在webpack配置文件中引入<code>speed-measure-webpack-plugin</code>;</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> speedMeasureWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;speed-measure-webpack-plugin&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> smp = <span class=\"keyword\">new</span> speedMeasureWebpackPlugin();</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smp.wrap(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p> 像上面的例子一样，使用插件中的<code>wrap</code>方法将内容包裹起来，在打包完成之后就能看到模块间的时间。</p>\n</li>\n</ol>\n<p><a data-fancybox title=\"速度分析\" href=\"https://img-blog.csdnimg.cn/2020042710203448.png\"><img src=\"https://img-blog.csdnimg.cn/2020042710203448.png\" alt=\"速度分析\"></a></p>\n<h2 id=\"分析（体积）-使用-webpack-bundle-analyzer\"><a href=\"#分析（体积）-使用-webpack-bundle-analyzer\" class=\"headerlink\" title=\"分析（体积）-使用 webpack-bundle-analyzer\"></a>分析（体积）-使用 <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a></h2><p>::: tip 作用</p>\n<ol>\n<li><p>依赖的第三方模块文件大小</p>\n</li>\n<li><p>业务里面的组件代码大小</p>\n</li>\n</ol>\n<p>:::</p>\n<ol>\n<li><p>安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure></li>\n<li><p>接入</p>\n<p> 在webpack配置文件中引入<code>webpack-bundle-analyzer</code>;</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = smp.wrap(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin ()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在构建完成之后可以访问本地8888端口（默认可修改），查看当前项目文件的体积关系</p>\n<h2 id=\"优化（速度）-使用-高版本的-webpack-和-Node-js\"><a href=\"#优化（速度）-使用-高版本的-webpack-和-Node-js\" class=\"headerlink\" title=\"优化（速度）-使用 高版本的 webpack 和 Node.js\"></a>优化（速度）-使用 高版本的 webpack 和 Node.js</h2><h2 id=\"优化（速度）-多进程-多实例构建\"><a href=\"#优化（速度）-多进程-多实例构建\" class=\"headerlink\" title=\"优化（速度）-多进程/多实例构建\"></a>优化（速度）-多进程/多实例构建</h2><p>::: tip 可选方案</p>\n<ol>\n<li><p>thread-loader</p>\n</li>\n<li><p>parallel-webpack</p>\n</li>\n<li><p>HappyPack</p>\n</li>\n</ol>\n<p>:::</p>\n<h3 id=\"使用-HappyPack-解析资源\"><a href=\"#使用-HappyPack-解析资源\" class=\"headerlink\" title=\"使用 HappyPack 解析资源\"></a>使用 <a href=\"https://github.com/amireh/happypack\">HappyPack</a> 解析资源</h3><p>::: tip 原理<br>每次 webpack 解析一个模块，HappyPack 会将它及它的依赖分配给 worker 线程中</p>\n<p>:::</p>\n<h3 id=\"使用-thread-loader-解析资源\"><a href=\"#使用-thread-loader-解析资源\" class=\"headerlink\" title=\"使用 thread-loader 解析资源\"></a>使用 <a href=\"https://github.com/webpack-contrib/thread-loader\">thread-loader</a> 解析资源</h3><p>::: tip 原理<br>每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给worker线程中<br>:::</p>\n<h2 id=\"优化（体积）-多进程-多实例：并行压缩\"><a href=\"#优化（体积）-多进程-多实例：并行压缩\" class=\"headerlink\" title=\"优化（体积）-多进程/多实例：并行压缩\"></a>优化（体积）-多进程/多实例：并行压缩</h2><ol>\n<li><p>使用 <a href=\"https://github.com/gdborton/webpack-parallel-uglify-plugin\">parallel-uglify-plugin</a> 插件</p>\n</li>\n<li><p><a href=\"https://github.com/webpack-contrib/uglifyjs-webpack-plugin\">uglifyjs-webpack-plugin</a> 开启 <code>parallel</code> 参数 （webpack 4 版本之前）</p>\n</li>\n<li><p><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin\">terser-webpack-plugin</a> 开启 <code>parallel</code> 参数 （webpack 4 版本之后）</p>\n</li>\n</ol>\n<h2 id=\"进一步分包\"><a href=\"#进一步分包\" class=\"headerlink\" title=\"进一步分包\"></a>进一步分包</h2><h3 id=\"设置-Externals-初级\"><a href=\"#设置-Externals-初级\" class=\"headerlink\" title=\"设置 Externals (初级)\"></a>设置 Externals (初级)</h3><p>::: tip 思路<br>将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中</p>\n<p>方法: 使用 html-webpack-externals-plugin<br>:::</p>\n<h3 id=\"预编译资源模块-高级\"><a href=\"#预编译资源模块-高级\" class=\"headerlink\" title=\"预编译资源模块 (高级)\"></a>预编译资源模块 (高级)</h3><p>::: tip 思路</p>\n<p>思路：将 react、react-dom、redux、react-redux 基础包和业务基础包打包成一个文件</p>\n<p>方法：使用 DLLPlugin 进行分包， DIIReferencePlugin 对 manifest.json 引用</p>\n<p>:::</p>\n<ol>\n<li><p>创建<code>webpack.dll.js</code>文件</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基础包</span></span><br><span class=\"line\">        <span class=\"attr\">library</span>: [</span><br><span class=\"line\">            <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"comment\">// 如果还有其他类可以在这里加一个键和对象</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[chunkhash].dll.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;build/library&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">library</span>: <span class=\"string\">&#x27;[name]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;build/library/[name].json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 文件用于分包，将一些基础包进行分离</p>\n</li>\n<li><p>引入分离包</p>\n<p> 首先可以在<code>package.json</code>中的<code>scripts</code>添加一项</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dll&quot;</span>: <span class=\"string\">&quot;webpack --config webpack.dll.js&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后在打包配置文件中增加：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">manifest</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./build/library/library.json&#x27;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"利用缓存提高二次构建速度\"><a href=\"#利用缓存提高二次构建速度\" class=\"headerlink\" title=\"利用缓存提高二次构建速度\"></a>利用缓存提高二次构建速度</h2><p>::: tip 缓存思路</p>\n<ol>\n<li><p>babel-loader 开启缓存</p>\n</li>\n<li><p>terser-webpack-plugin 开启缓存</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TerserPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">cache</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 cache-loader 或者 hard-source-webpack-plugin</p>\n</li>\n</ol>\n<p>:::</p>\n<h2 id=\"缩小构建目标\"><a href=\"#缩小构建目标\" class=\"headerlink\" title=\"缩小构建目标\"></a>缩小构建目标</h2><h3 id=\"减少文件搜索范围\"><a href=\"#减少文件搜索范围\" class=\"headerlink\" title=\"减少文件搜索范围\"></a>减少文件搜索范围</h3><ol>\n<li><p>优化 resolve.modules 配置 （减少模块搜索层级）</p>\n</li>\n<li><p>优化 resolve.mainFields 配置</p>\n</li>\n<li><p>优化 resolve.extensions 配置</p>\n</li>\n<li><p>合理使用 alias</p>\n</li>\n</ol>\n<h2 id=\"使用-Tree-Shaking-擦除无用的JavaScript和CSS\"><a href=\"#使用-Tree-Shaking-擦除无用的JavaScript和CSS\" class=\"headerlink\" title=\"使用 Tree Shaking 擦除无用的JavaScript和CSS\"></a>使用 Tree Shaking 擦除无用的JavaScript和CSS</h2><h3 id=\"无用的CSS如何删除掉\"><a href=\"#无用的CSS如何删除掉\" class=\"headerlink\" title=\"无用的CSS如何删除掉\"></a>无用的CSS如何删除掉</h3><ol>\n<li><p>PurifyCSS: 遍历代码，识别已经用到的 CSS class</p>\n<p> 如何在 webpack 中使用 PurifyCSS</p>\n<p> ::: tip 提示</p>\n<pre><code> 使用 `purgecss-webpack-plugin` 和 `mini-css-extract-plugin` 配合使用\n</code></pre>\n<p> :::</p>\n<p> (1) 安装</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p> or</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add purgecss-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p> 在webpack配置文件中使用：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PurgecssPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;purgecss-webpack-plugin&#x27;</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> PATHS = &#123;</span><br><span class=\"line\">    <span class=\"attr\">src</span>: path.join(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> PurgecssPlugin (&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里的glob类似我们之前那种多页面打包的方式获取对应文件</span></span><br><span class=\"line\">        <span class=\"attr\">paths</span>: glob.sync(<span class=\"string\">`<span class=\"subst\">$&#123;PATHS.src&#125;</span>/**/*`</span>, &#123; <span class=\"attr\">nodir</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p> <a href=\"https://github.com/FullHuman/purgecss/tree/master/packages/purgecss-webpack-plugin\">purgecss-webpack-plugin</a></p>\n</li>\n<li><p>uncss: HTML 需要通过 jsdom 加载，所有的样式通过 PostCSS 解析，通过 document.querySelector 来识别在 html 文件里面不存在的选择器</p>\n</li>\n</ol>\n<h2 id=\"使用webpack进行图片压缩\"><a href=\"#使用webpack进行图片压缩\" class=\"headerlink\" title=\"使用webpack进行图片压缩\"></a>使用webpack进行图片压缩</h2><p>::: tip 提示<br>要求：基于Node库的 <code>imagemin</code> 或者 <code>tinypng</code> API</p>\n<p>使用：配置 <a href=\"https://github.com/tcoopman/image-webpack-loader\">image-webpack-loader</a><br>:::</p>\n<p>::: tip Imagemin 的优点分析</p>\n<ol>\n<li><p>有很多定制选项</p>\n</li>\n<li><p>可以引入更多第三方优化插件，例如pngquart</p>\n</li>\n<li><p>可以处理多种图片格式<br>:::</p>\n</li>\n</ol>\n<h2 id=\"使用Polyfill\"><a href=\"#使用Polyfill\" class=\"headerlink\" title=\"使用Polyfill\"></a>使用Polyfill</h2>"},{"title":"webpack构建配置","date":"2021-11-19T03:54:29.000Z","_content":"\n\n## 构建配置管理\n\n### 构建配置抽离成 npm 包的意义\n\n::: tip 通用性\n\n1. 业务开发者无需关注构建配置\n2. 统一团队构建脚本 \n:::\n\n::: tip 可维护性\n\n1. 构建配置合理的拆分\n2. README 文档、ChangeLog 文档等\n:::\n\n::: tip 质量\n\n1. 冒烟测试、单元测试、测试覆盖等\n2. 持续集成\n:::\n\n### 可选方案\n\n1、通过多个配置文件管理不同环境的构建， webpack --config 参数进行控制；\n\n2、将构建配置设计成一个库，比如：hjs-webpack、Neutrino、webpack-blocks；\n\n3、抽成一个工具进行管理，比如：create-react-app、kyt、nwb；（人数规模较大）\n\n4、将所有的配置放在一个文件，通过--env 参数控制分支选择；\n\n### 构建配置包设计\n\n(1)、通过多个配置文件管理不同环境的 webpack 配置\n\n1. 基础配置：webpack.base.js\n2. 开发环境：webpack.dev.js\n3. 生产环境：webpack.prod.js\n4. SSR环境：webpack.ssr.js\n\n(2)、抽离成一个 npm 包统一管理\n规范：Git commit 日志、README、ESLint 规范、Semver 规范\n质量：冒烟测试、单元测试、测试覆盖率和CI\n\n### 配置组合\n通过 `webpack-merge` 组合配置\n\n合并配置: module.exports = merge(baseConfig, devConfig);\n\n### 结构设计\n\n<a data-fancybox title=\"目录结构\" href=\"https://img-blog.csdnimg.cn/20200419112012211.png\">![目录结构](https://img-blog.csdnimg.cn/20200419112012211.png)</a>\n\n::: tip 引入\n如上图创建我们的目录结构，然后针对对应的功能需求添加到相应模块，base.js用于作为我们的基础模块，之后针对每个打包情况的特殊性再对相应模块进行特殊化；\n最后使用merge的方法串联起来。\n:::\n比如，我创建了之前学习文章中的功能集合，添加再base.js中\n\n```javaScript\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst glob = require('glob');\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst HtmlWebpackExternalsPlugin = require('html-webpack-externals-plugin');\nconst FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nconst setMPA = () => {\n    const entry = {};\n    const HtmlWebpackPlugins = [];\n\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'))\n\n    entryFiles.map((item, index) => {\n        const entryFile = item;\n        const match = entryFile.match(/src\\/(.*)\\/index\\.js/)\n        const pageName = match && match[1];\n\n        entry[pageName] = entryFile;\n        HtmlWebpackPlugins.push(\n            new HtmlWebpackPlugin ({\n                template: path.join(__dirname, `src/${pageName}/index.html`),\n                filename: `${pageName}.html`,\n                chunks: [pageName],\n                inject: true,\n                minify: {\n                    html5: true,\n                    collapseWhitespace: true,\n                    preserveLineBreaks: false,\n                    minifyCSS: true,\n                    minifyJS: true,\n                    removeComments: false\n                }\n            })\n        );\n    })\n\n    return {\n        entry,\n        HtmlWebpackPlugins\n    }\n}\n\nconst { entry, HtmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry,\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [  \n                    'babel-loader'\n                ]\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader'\n                ]\n            },\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: () => [\n                                require('autoprefixer')({\n                                    overrideBrowserslist: ['last 2 version', '>1%', 'ios 7']\n                                })\n                            ]\n                        }\n                    }\n                ]\n            },\n            //以下为添加内容\n            {\n                test:/\\.(png|jpg|gif|jpeg)$/,\n                use: {\n                    loader: 'file-loader',\n                    options: {\n                        name: '[name]_[hash:8].[ext]'\n                    }\n                }\n            },\n            {\n                test: /\\.(woff|woff2|eot|ttf|otf)$/,\n                use: 'file-loader'\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new CleanWebpackPlugin(),\n        new FriendlyErrorsWebpackPlugin(),\n        function () {\n            this.hooks.done.tap('done', (stats) => {\n                if (stats.compilation.errors && process.argv.indexOf('--watch') == -1) {\n                    console.log('build error');\n                    process.exit(1);\n                }\n            })\n        }\n    ].concat(HtmlWebpackPlugins),\n    stats: 'errors-only'\n}\n```\n\n然后在`webpack.dev.js`中对开发环境进行特殊化\n\n```javaScript\nconst merge = require('webpack-merge')\nconst baseConfig = require('./webpack.base');\n\nconst devConfig = {\n    mode: 'development',\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        contentBase: './dist',\n        hot: true  // webpack文档表明配置了此会自动引入这个插件\n    }\n};\n\nmodule.exports = merge(baseConfig, devConfig);\n```\n\n上面代码中针对开发环境添加了热更新功能，其它环境的文件也是类似上面代码，进行特殊化添加，最后使用merge串联起来。\n\n其余代码：[github](https://github.com/KoWhite/webpack-demo/tree/1787f9a4f8414dc6c73ec2711cc30bfafc16b4df/builder-webpack)\n\n## 使用ESLint 规范构建脚本\n\n使用`eslint-config-airbnb-base`, `eslint --fix` 可以自动处理空格\n\n## 冒烟测试\n\n::: tip 概念\n冒烟测试是指对提交测试的软件在进行详细深入的测试之前进行的预测试\n\n目的是暴露导致软件重新发布的基本功能失效等严重问题\n:::\n\n::: tip 步骤\n\n1. 构建是否成功\n\n2. 每次构建完成build目录是否有内容输出\n\n是否有JS、CSS等静态资源文件\n\n是否有HTML文件\n:::\n\n### 判断构建是否成功\n\n（1）可以通过`npm script` 中配置构建命令，通过命令行开始构建判断构建是否成功\n\n（2）首先我们创建一个测试的路口文件，在`test`文件夹下创建`smoke`文件夹，在此文件夹下创建`index.js`文件\n\n然后在`smoke`下创建`template`文件夹放置我们文章之前的代码，删除多余的webpack配置文件\n\n```javaScript\nconst path = require('path');\nconst webpack = require('webpack');\nconst rimraf = require('rimraf'); // 需要先安装rimraf\n\nprocess.chdir(path.join(__dirname, 'template'));\n\n// 作用是先将./dist移除。第二个参数是移除完成之后的回调\nrimraf('./dist', () => {\n    const prodConfig = require('../../lib/webpack.prod.js');\n\n    // 执行配置文件，第二个参数是执行完成之后的回调，一个是错误参数，一个是状态码\n    webpack(prodConfig, (err, stats) => {\n        if (err) {\n            console.error(err);\n            process.exit(2);\n        }\n\n        console.log(stats.toString({\n            colors: true,\n            modules: false,\n            children: false\n        }));\n\n        console.log('Webpack build success, begin run test')\n    })\n});\n```\n\n### 判断基本功能是否正常\n\n以mocha为例，编写mocha测试用例，判断构建是否有内容输出\n\n安装mocha：\n\n```javaScript\nnpm i mocha -D\n```\n\nor\n\n```javaScript\nyarn add mocha -D\n```\n\n首先我们在`index.js`同层级下创建`html-test.js`，此文件用于检测是否有html文件输出\n\n```javaScript\n// 首先需要npm安装glob-all\nconst glob = require('glob-all');\n\ndescribe('Checking generated html files', () => {\n    it ('should generated html false', (done) => {\n        const files = glob.sync([\n            './dist/index.html',\n            './dist/search.html'\n        ]);\n\n        if (files.length > 0) {\n            done();\n        } else {\n            throw new Error('no html files generated')\n        }\n    })\n});\n```\n\n然后我们再同层级下创建`css-js-test.js`，此文件用于检测是否有css/js文件输出\n\n```javaScript\nconst glob = require('glob-all');\n\ndescribe('Checking generated css js files', () => {\n    it ('should generated css js false', (done) => {\n        const files = glob.sync([\n            './dist/index_*.js',\n            './dist/index_*.css',\n            './dist/search_*.js',\n            './dist/search_*.css'\n        ]);\n\n        if (files.length > 0) {\n            done();\n        } else {\n            throw new Error('no css js files generated')\n        }\n    })\n});\n```\n\n最后我们在命令行中执行`node test/smoke/index.js`\n\n[mocha教程](https://www.liaoxuefeng.com/wiki/1022910821149312/1101741181366880)\n\n## 单元测试和测试覆盖率\n\n接下来以mocha为例\n\n1. 技术选型：Mocha + Chai\n\n2. 测试代码：describe, it, except\n\n3. 测试命令：mocha add.test.js\n\n### 单元测试接入\n\n1. 安装 mocha + chai\n\n```javaScript\nnpm i mocha chai -D\n```\n\nor\n\n```javaScript\nyarn add mocha chai -D\n```\n\n2. 新建`test`目录，并增加`xxx.test.js`测试文件\n\n创建测试文件`index.js`\n\n```javaScript\nconst path = require('path');\n\nprocess.chdir(path.join(__dirname, 'smoke/template/'));\n\ndescribe('builder-webpack test code', () => {\n    require('./unit/webpack-base-test')\n})\n```\n\n创建单元测试文件`webpack-base-test.js`\n\n```javaScript\nconst assert = require('assert');\n\ndescribe('webpack.base.js test  case', () => {\n    const baseConfig = require('../../lib/webpack.base.js');\n\n    it('entry', () => {\n        assert.equal(baseConfig.entry.index, 'D:/demo/wp-demo/builder-webpack/test/smoke/template/src/index/index.js');\n        assert.equal(baseConfig.entry.search, 'D:/demo/wp-demo/builder-webpack/test/smoke/template/src/search/index.js');\n    })\n});\n```\n\n3. 在`package.json`中的`scripts`字段增加`test`命令\n\n```javaScript\n\"scripts\": {\n    \"test\": \"node_modules/mocha/bin/_mocha\"\n},\n```\n\n4. 执行测试命令\n\n```javaScript\nnpm run test\n```\n\n### 覆盖测试\n\n这里推荐使用[instanful](https://istanbul.js.org/)\n\nnpm 或者yarn 安装好之后，在`package.json`中的`scripts`字段修改`test`命令\n\n```javaScript\n\"scripts\": {\n    \"test\": \"istanbul cover ./node_modules/mocha/bin/_mocha\"\n},\n```\n\n## 持续集成\n\n::: tip 作用\n\n1. 快速发现错误；\n\n2. 防止分支大幅偏离主干；\n\n核心措施是，代码集成到主干之前，必须通过自动化测试。只要一个测试用例失败，就不能集成。\n:::\n\n### 接入Travis CI\n\n1. <https://travis-ci.org/> 使用 Github 账号登录；\n\n2. 在<http://travis-ci.org/account/repositories>为项目开启\n\n3. 项目根目录下新增 .travis.yml\n\n### 接入实操\n\n首先在github上面创建一个repository，然后将我们之前写的`builder-webpack`放在文件夹中，之后我们可以访问上面的travis CI网站看到我们的项目。\n\n我们在项目根目录中新增`.travis.yml`：\n\n```javaScript\nlanguage: node_js\n\nsudo: false\n\ncache: \n    apt: true\n    directories: \n        - node_modules\n\nnode_js: stable\n\ninstall: \n    - npm install -D\n    - cd ./test/smoke/template\n    - npm install -D\n    - cd ../../../\n\nscripts:\n    - npm test\n```\n\n将代码push到github，之后便可以在travis CI 看到我们项目的构建\n\n<a data-fancybox title=\"travis CI\" href=\"https://img-blog.csdnimg.cn/20200426163643379.png\">![travis CI](https://img-blog.csdnimg.cn/20200426163643379.png)</a>\n\n## 发布构建包到npm\n\n首先在npm官网查看下需要发布的包名有没有重复\n\n然后命令行运行`npm login`登录你的npm账号\n\n执行`npm publish`发布版本\n\n升级版本\n\n1. 升级补丁版本号：`npm version patch`\n\n2. 升级小版本号：`npm version minor`\n\n3. 升级大版本号：`npm version major`\n\n## 开源项目版本信息案例\n\n软件的版本通常由三位组成，形如：X.Y.Z\n\n版本是严格递增的\n\n在发布重要版本时，可以发布alpha、rc等先行版本\n\n::: tip 优势\n\n1. 避免出现循环依赖\n\n2. 依赖冲突减少\n:::\n\n::: tip 语义化版本（Semantic Versioning）规范格式\n主版本号：当你做了不兼容的API修改\n\n次版本号：当你做了向下兼容的功能性新增\n\n修订号：当你做了向下兼容的问题修正\n:::\n","source":"_posts/webpack构建配置.md","raw":"---\ntitle: webpack构建配置\ndate: 2021-11-19 11:54:29\ntags:\n---\n\n\n## 构建配置管理\n\n### 构建配置抽离成 npm 包的意义\n\n::: tip 通用性\n\n1. 业务开发者无需关注构建配置\n2. 统一团队构建脚本 \n:::\n\n::: tip 可维护性\n\n1. 构建配置合理的拆分\n2. README 文档、ChangeLog 文档等\n:::\n\n::: tip 质量\n\n1. 冒烟测试、单元测试、测试覆盖等\n2. 持续集成\n:::\n\n### 可选方案\n\n1、通过多个配置文件管理不同环境的构建， webpack --config 参数进行控制；\n\n2、将构建配置设计成一个库，比如：hjs-webpack、Neutrino、webpack-blocks；\n\n3、抽成一个工具进行管理，比如：create-react-app、kyt、nwb；（人数规模较大）\n\n4、将所有的配置放在一个文件，通过--env 参数控制分支选择；\n\n### 构建配置包设计\n\n(1)、通过多个配置文件管理不同环境的 webpack 配置\n\n1. 基础配置：webpack.base.js\n2. 开发环境：webpack.dev.js\n3. 生产环境：webpack.prod.js\n4. SSR环境：webpack.ssr.js\n\n(2)、抽离成一个 npm 包统一管理\n规范：Git commit 日志、README、ESLint 规范、Semver 规范\n质量：冒烟测试、单元测试、测试覆盖率和CI\n\n### 配置组合\n通过 `webpack-merge` 组合配置\n\n合并配置: module.exports = merge(baseConfig, devConfig);\n\n### 结构设计\n\n<a data-fancybox title=\"目录结构\" href=\"https://img-blog.csdnimg.cn/20200419112012211.png\">![目录结构](https://img-blog.csdnimg.cn/20200419112012211.png)</a>\n\n::: tip 引入\n如上图创建我们的目录结构，然后针对对应的功能需求添加到相应模块，base.js用于作为我们的基础模块，之后针对每个打包情况的特殊性再对相应模块进行特殊化；\n最后使用merge的方法串联起来。\n:::\n比如，我创建了之前学习文章中的功能集合，添加再base.js中\n\n```javaScript\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst glob = require('glob');\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst HtmlWebpackExternalsPlugin = require('html-webpack-externals-plugin');\nconst FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nconst setMPA = () => {\n    const entry = {};\n    const HtmlWebpackPlugins = [];\n\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'))\n\n    entryFiles.map((item, index) => {\n        const entryFile = item;\n        const match = entryFile.match(/src\\/(.*)\\/index\\.js/)\n        const pageName = match && match[1];\n\n        entry[pageName] = entryFile;\n        HtmlWebpackPlugins.push(\n            new HtmlWebpackPlugin ({\n                template: path.join(__dirname, `src/${pageName}/index.html`),\n                filename: `${pageName}.html`,\n                chunks: [pageName],\n                inject: true,\n                minify: {\n                    html5: true,\n                    collapseWhitespace: true,\n                    preserveLineBreaks: false,\n                    minifyCSS: true,\n                    minifyJS: true,\n                    removeComments: false\n                }\n            })\n        );\n    })\n\n    return {\n        entry,\n        HtmlWebpackPlugins\n    }\n}\n\nconst { entry, HtmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry,\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [  \n                    'babel-loader'\n                ]\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader'\n                ]\n            },\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: () => [\n                                require('autoprefixer')({\n                                    overrideBrowserslist: ['last 2 version', '>1%', 'ios 7']\n                                })\n                            ]\n                        }\n                    }\n                ]\n            },\n            //以下为添加内容\n            {\n                test:/\\.(png|jpg|gif|jpeg)$/,\n                use: {\n                    loader: 'file-loader',\n                    options: {\n                        name: '[name]_[hash:8].[ext]'\n                    }\n                }\n            },\n            {\n                test: /\\.(woff|woff2|eot|ttf|otf)$/,\n                use: 'file-loader'\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new CleanWebpackPlugin(),\n        new FriendlyErrorsWebpackPlugin(),\n        function () {\n            this.hooks.done.tap('done', (stats) => {\n                if (stats.compilation.errors && process.argv.indexOf('--watch') == -1) {\n                    console.log('build error');\n                    process.exit(1);\n                }\n            })\n        }\n    ].concat(HtmlWebpackPlugins),\n    stats: 'errors-only'\n}\n```\n\n然后在`webpack.dev.js`中对开发环境进行特殊化\n\n```javaScript\nconst merge = require('webpack-merge')\nconst baseConfig = require('./webpack.base');\n\nconst devConfig = {\n    mode: 'development',\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        contentBase: './dist',\n        hot: true  // webpack文档表明配置了此会自动引入这个插件\n    }\n};\n\nmodule.exports = merge(baseConfig, devConfig);\n```\n\n上面代码中针对开发环境添加了热更新功能，其它环境的文件也是类似上面代码，进行特殊化添加，最后使用merge串联起来。\n\n其余代码：[github](https://github.com/KoWhite/webpack-demo/tree/1787f9a4f8414dc6c73ec2711cc30bfafc16b4df/builder-webpack)\n\n## 使用ESLint 规范构建脚本\n\n使用`eslint-config-airbnb-base`, `eslint --fix` 可以自动处理空格\n\n## 冒烟测试\n\n::: tip 概念\n冒烟测试是指对提交测试的软件在进行详细深入的测试之前进行的预测试\n\n目的是暴露导致软件重新发布的基本功能失效等严重问题\n:::\n\n::: tip 步骤\n\n1. 构建是否成功\n\n2. 每次构建完成build目录是否有内容输出\n\n是否有JS、CSS等静态资源文件\n\n是否有HTML文件\n:::\n\n### 判断构建是否成功\n\n（1）可以通过`npm script` 中配置构建命令，通过命令行开始构建判断构建是否成功\n\n（2）首先我们创建一个测试的路口文件，在`test`文件夹下创建`smoke`文件夹，在此文件夹下创建`index.js`文件\n\n然后在`smoke`下创建`template`文件夹放置我们文章之前的代码，删除多余的webpack配置文件\n\n```javaScript\nconst path = require('path');\nconst webpack = require('webpack');\nconst rimraf = require('rimraf'); // 需要先安装rimraf\n\nprocess.chdir(path.join(__dirname, 'template'));\n\n// 作用是先将./dist移除。第二个参数是移除完成之后的回调\nrimraf('./dist', () => {\n    const prodConfig = require('../../lib/webpack.prod.js');\n\n    // 执行配置文件，第二个参数是执行完成之后的回调，一个是错误参数，一个是状态码\n    webpack(prodConfig, (err, stats) => {\n        if (err) {\n            console.error(err);\n            process.exit(2);\n        }\n\n        console.log(stats.toString({\n            colors: true,\n            modules: false,\n            children: false\n        }));\n\n        console.log('Webpack build success, begin run test')\n    })\n});\n```\n\n### 判断基本功能是否正常\n\n以mocha为例，编写mocha测试用例，判断构建是否有内容输出\n\n安装mocha：\n\n```javaScript\nnpm i mocha -D\n```\n\nor\n\n```javaScript\nyarn add mocha -D\n```\n\n首先我们在`index.js`同层级下创建`html-test.js`，此文件用于检测是否有html文件输出\n\n```javaScript\n// 首先需要npm安装glob-all\nconst glob = require('glob-all');\n\ndescribe('Checking generated html files', () => {\n    it ('should generated html false', (done) => {\n        const files = glob.sync([\n            './dist/index.html',\n            './dist/search.html'\n        ]);\n\n        if (files.length > 0) {\n            done();\n        } else {\n            throw new Error('no html files generated')\n        }\n    })\n});\n```\n\n然后我们再同层级下创建`css-js-test.js`，此文件用于检测是否有css/js文件输出\n\n```javaScript\nconst glob = require('glob-all');\n\ndescribe('Checking generated css js files', () => {\n    it ('should generated css js false', (done) => {\n        const files = glob.sync([\n            './dist/index_*.js',\n            './dist/index_*.css',\n            './dist/search_*.js',\n            './dist/search_*.css'\n        ]);\n\n        if (files.length > 0) {\n            done();\n        } else {\n            throw new Error('no css js files generated')\n        }\n    })\n});\n```\n\n最后我们在命令行中执行`node test/smoke/index.js`\n\n[mocha教程](https://www.liaoxuefeng.com/wiki/1022910821149312/1101741181366880)\n\n## 单元测试和测试覆盖率\n\n接下来以mocha为例\n\n1. 技术选型：Mocha + Chai\n\n2. 测试代码：describe, it, except\n\n3. 测试命令：mocha add.test.js\n\n### 单元测试接入\n\n1. 安装 mocha + chai\n\n```javaScript\nnpm i mocha chai -D\n```\n\nor\n\n```javaScript\nyarn add mocha chai -D\n```\n\n2. 新建`test`目录，并增加`xxx.test.js`测试文件\n\n创建测试文件`index.js`\n\n```javaScript\nconst path = require('path');\n\nprocess.chdir(path.join(__dirname, 'smoke/template/'));\n\ndescribe('builder-webpack test code', () => {\n    require('./unit/webpack-base-test')\n})\n```\n\n创建单元测试文件`webpack-base-test.js`\n\n```javaScript\nconst assert = require('assert');\n\ndescribe('webpack.base.js test  case', () => {\n    const baseConfig = require('../../lib/webpack.base.js');\n\n    it('entry', () => {\n        assert.equal(baseConfig.entry.index, 'D:/demo/wp-demo/builder-webpack/test/smoke/template/src/index/index.js');\n        assert.equal(baseConfig.entry.search, 'D:/demo/wp-demo/builder-webpack/test/smoke/template/src/search/index.js');\n    })\n});\n```\n\n3. 在`package.json`中的`scripts`字段增加`test`命令\n\n```javaScript\n\"scripts\": {\n    \"test\": \"node_modules/mocha/bin/_mocha\"\n},\n```\n\n4. 执行测试命令\n\n```javaScript\nnpm run test\n```\n\n### 覆盖测试\n\n这里推荐使用[instanful](https://istanbul.js.org/)\n\nnpm 或者yarn 安装好之后，在`package.json`中的`scripts`字段修改`test`命令\n\n```javaScript\n\"scripts\": {\n    \"test\": \"istanbul cover ./node_modules/mocha/bin/_mocha\"\n},\n```\n\n## 持续集成\n\n::: tip 作用\n\n1. 快速发现错误；\n\n2. 防止分支大幅偏离主干；\n\n核心措施是，代码集成到主干之前，必须通过自动化测试。只要一个测试用例失败，就不能集成。\n:::\n\n### 接入Travis CI\n\n1. <https://travis-ci.org/> 使用 Github 账号登录；\n\n2. 在<http://travis-ci.org/account/repositories>为项目开启\n\n3. 项目根目录下新增 .travis.yml\n\n### 接入实操\n\n首先在github上面创建一个repository，然后将我们之前写的`builder-webpack`放在文件夹中，之后我们可以访问上面的travis CI网站看到我们的项目。\n\n我们在项目根目录中新增`.travis.yml`：\n\n```javaScript\nlanguage: node_js\n\nsudo: false\n\ncache: \n    apt: true\n    directories: \n        - node_modules\n\nnode_js: stable\n\ninstall: \n    - npm install -D\n    - cd ./test/smoke/template\n    - npm install -D\n    - cd ../../../\n\nscripts:\n    - npm test\n```\n\n将代码push到github，之后便可以在travis CI 看到我们项目的构建\n\n<a data-fancybox title=\"travis CI\" href=\"https://img-blog.csdnimg.cn/20200426163643379.png\">![travis CI](https://img-blog.csdnimg.cn/20200426163643379.png)</a>\n\n## 发布构建包到npm\n\n首先在npm官网查看下需要发布的包名有没有重复\n\n然后命令行运行`npm login`登录你的npm账号\n\n执行`npm publish`发布版本\n\n升级版本\n\n1. 升级补丁版本号：`npm version patch`\n\n2. 升级小版本号：`npm version minor`\n\n3. 升级大版本号：`npm version major`\n\n## 开源项目版本信息案例\n\n软件的版本通常由三位组成，形如：X.Y.Z\n\n版本是严格递增的\n\n在发布重要版本时，可以发布alpha、rc等先行版本\n\n::: tip 优势\n\n1. 避免出现循环依赖\n\n2. 依赖冲突减少\n:::\n\n::: tip 语义化版本（Semantic Versioning）规范格式\n主版本号：当你做了不兼容的API修改\n\n次版本号：当你做了向下兼容的功能性新增\n\n修订号：当你做了向下兼容的问题修正\n:::\n","slug":"webpack构建配置","published":1,"updated":"2021-11-19T03:55:07.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5unkvu000104vc8df59alf","content":"<h2 id=\"构建配置管理\"><a href=\"#构建配置管理\" class=\"headerlink\" title=\"构建配置管理\"></a>构建配置管理</h2><h3 id=\"构建配置抽离成-npm-包的意义\"><a href=\"#构建配置抽离成-npm-包的意义\" class=\"headerlink\" title=\"构建配置抽离成 npm 包的意义\"></a>构建配置抽离成 npm 包的意义</h3><p>::: tip 通用性</p>\n<ol>\n<li>业务开发者无需关注构建配置</li>\n<li>统一团队构建脚本<br>:::</li>\n</ol>\n<p>::: tip 可维护性</p>\n<ol>\n<li>构建配置合理的拆分</li>\n<li>README 文档、ChangeLog 文档等<br>:::</li>\n</ol>\n<p>::: tip 质量</p>\n<ol>\n<li>冒烟测试、单元测试、测试覆盖等</li>\n<li>持续集成<br>:::</li>\n</ol>\n<h3 id=\"可选方案\"><a href=\"#可选方案\" class=\"headerlink\" title=\"可选方案\"></a>可选方案</h3><p>1、通过多个配置文件管理不同环境的构建， webpack –config 参数进行控制；</p>\n<p>2、将构建配置设计成一个库，比如：hjs-webpack、Neutrino、webpack-blocks；</p>\n<p>3、抽成一个工具进行管理，比如：create-react-app、kyt、nwb；（人数规模较大）</p>\n<p>4、将所有的配置放在一个文件，通过–env 参数控制分支选择；</p>\n<h3 id=\"构建配置包设计\"><a href=\"#构建配置包设计\" class=\"headerlink\" title=\"构建配置包设计\"></a>构建配置包设计</h3><p>(1)、通过多个配置文件管理不同环境的 webpack 配置</p>\n<ol>\n<li>基础配置：webpack.base.js</li>\n<li>开发环境：webpack.dev.js</li>\n<li>生产环境：webpack.prod.js</li>\n<li>SSR环境：webpack.ssr.js</li>\n</ol>\n<p>(2)、抽离成一个 npm 包统一管理<br>规范：Git commit 日志、README、ESLint 规范、Semver 规范<br>质量：冒烟测试、单元测试、测试覆盖率和CI</p>\n<h3 id=\"配置组合\"><a href=\"#配置组合\" class=\"headerlink\" title=\"配置组合\"></a>配置组合</h3><p>通过 <code>webpack-merge</code> 组合配置</p>\n<p>合并配置: module.exports = merge(baseConfig, devConfig);</p>\n<h3 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h3><p><a data-fancybox title=\"目录结构\" href=\"https://img-blog.csdnimg.cn/20200419112012211.png\"><img src=\"https://img-blog.csdnimg.cn/20200419112012211.png\" alt=\"目录结构\"></a></p>\n<p>::: tip 引入<br>如上图创建我们的目录结构，然后针对对应的功能需求添加到相应模块，base.js用于作为我们的基础模块，之后针对每个打包情况的特殊性再对相应模块进行特殊化；<br>最后使用merge的方法串联起来。<br>:::<br>比如，我创建了之前学习文章中的功能集合，添加再base.js中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-externals-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;friendly-errors-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HtmlWebpackPlugins = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">&#x27;./src/*/index.js&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    entryFiles.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entryFile = item;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageName = match &amp;&amp; match[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        entry[pageName] = entryFile;</span><br><span class=\"line\">        HtmlWebpackPlugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">                <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;pageName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">`<span class=\"subst\">$&#123;pageName&#125;</span>.html`</span>,</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: [pageName],</span><br><span class=\"line\">                <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        entry,</span><br><span class=\"line\">        HtmlWebpackPlugins</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, HtmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: [  </span><br><span class=\"line\">                    <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class=\"line\">                                    <span class=\"attr\">overrideBrowserslist</span>: [<span class=\"string\">&#x27;last 2 version&#x27;</span>, <span class=\"string\">&#x27;&gt;1%&#x27;</span>, <span class=\"string\">&#x27;ios 7&#x27;</span>]</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]_[hash:8].[ext]&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin(),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.hooks.done.tap(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stats.compilation.errors &amp;&amp; process.argv.indexOf(<span class=\"string\">&#x27;--watch&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;build error&#x27;</span>);</span><br><span class=\"line\">                    process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ].concat(HtmlWebpackPlugins),</span><br><span class=\"line\">    <span class=\"attr\">stats</span>: <span class=\"string\">&#x27;errors-only&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>webpack.dev.js</code>中对开发环境进行特殊化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.base&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> devConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;./dist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>  <span class=\"comment\">// webpack文档表明配置了此会自动引入这个插件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(baseConfig, devConfig);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中针对开发环境添加了热更新功能，其它环境的文件也是类似上面代码，进行特殊化添加，最后使用merge串联起来。</p>\n<p>其余代码：<a href=\"https://github.com/KoWhite/webpack-demo/tree/1787f9a4f8414dc6c73ec2711cc30bfafc16b4df/builder-webpack\">github</a></p>\n<h2 id=\"使用ESLint-规范构建脚本\"><a href=\"#使用ESLint-规范构建脚本\" class=\"headerlink\" title=\"使用ESLint 规范构建脚本\"></a>使用ESLint 规范构建脚本</h2><p>使用<code>eslint-config-airbnb-base</code>, <code>eslint --fix</code> 可以自动处理空格</p>\n<h2 id=\"冒烟测试\"><a href=\"#冒烟测试\" class=\"headerlink\" title=\"冒烟测试\"></a>冒烟测试</h2><p>::: tip 概念<br>冒烟测试是指对提交测试的软件在进行详细深入的测试之前进行的预测试</p>\n<p>目的是暴露导致软件重新发布的基本功能失效等严重问题<br>:::</p>\n<p>::: tip 步骤</p>\n<ol>\n<li><p>构建是否成功</p>\n</li>\n<li><p>每次构建完成build目录是否有内容输出</p>\n</li>\n</ol>\n<p>是否有JS、CSS等静态资源文件</p>\n<p>是否有HTML文件<br>:::</p>\n<h3 id=\"判断构建是否成功\"><a href=\"#判断构建是否成功\" class=\"headerlink\" title=\"判断构建是否成功\"></a>判断构建是否成功</h3><p>（1）可以通过<code>npm script</code> 中配置构建命令，通过命令行开始构建判断构建是否成功</p>\n<p>（2）首先我们创建一个测试的路口文件，在<code>test</code>文件夹下创建<code>smoke</code>文件夹，在此文件夹下创建<code>index.js</code>文件</p>\n<p>然后在<code>smoke</code>下创建<code>template</code>文件夹放置我们文章之前的代码，删除多余的webpack配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rimraf = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rimraf&#x27;</span>); <span class=\"comment\">// 需要先安装rimraf</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.chdir(path.join(__dirname, <span class=\"string\">&#x27;template&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作用是先将./dist移除。第二个参数是移除完成之后的回调</span></span><br><span class=\"line\">rimraf(<span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prodConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../lib/webpack.prod.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行配置文件，第二个参数是执行完成之后的回调，一个是错误参数，一个是状态码</span></span><br><span class=\"line\">    webpack(prodConfig, <span class=\"function\">(<span class=\"params\">err, stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">            process.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stats.toString(&#123;</span><br><span class=\"line\">            <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">modules</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Webpack build success, begin run test&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断基本功能是否正常\"><a href=\"#判断基本功能是否正常\" class=\"headerlink\" title=\"判断基本功能是否正常\"></a>判断基本功能是否正常</h3><p>以mocha为例，编写mocha测试用例，判断构建是否有内容输出</p>\n<p>安装mocha：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mocha -D</span><br></pre></td></tr></table></figure>\n\n<p>首先我们在<code>index.js</code>同层级下创建<code>html-test.js</code>，此文件用于检测是否有html文件输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先需要npm安装glob-all</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob-all&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Checking generated html files&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    it (<span class=\"string\">&#x27;should generated html false&#x27;</span>, <span class=\"function\">(<span class=\"params\">done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> files = glob.sync([</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index.html&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search.html&#x27;</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            done();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;no html files generated&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们再同层级下创建<code>css-js-test.js</code>，此文件用于检测是否有css/js文件输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob-all&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Checking generated css js files&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    it (<span class=\"string\">&#x27;should generated css js false&#x27;</span>, <span class=\"function\">(<span class=\"params\">done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> files = glob.sync([</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index_*.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index_*.css&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search_*.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search_*.css&#x27;</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            done();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;no css js files generated&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后我们在命令行中执行<code>node test/smoke/index.js</code></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1101741181366880\">mocha教程</a></p>\n<h2 id=\"单元测试和测试覆盖率\"><a href=\"#单元测试和测试覆盖率\" class=\"headerlink\" title=\"单元测试和测试覆盖率\"></a>单元测试和测试覆盖率</h2><p>接下来以mocha为例</p>\n<ol>\n<li><p>技术选型：Mocha + Chai</p>\n</li>\n<li><p>测试代码：describe, it, except</p>\n</li>\n<li><p>测试命令：mocha add.test.js</p>\n</li>\n</ol>\n<h3 id=\"单元测试接入\"><a href=\"#单元测试接入\" class=\"headerlink\" title=\"单元测试接入\"></a>单元测试接入</h3><ol>\n<li>安装 mocha + chai</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mocha chai -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>test</code>目录，并增加<code>xxx.test.js</code>测试文件</li>\n</ol>\n<p>创建测试文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.chdir(path.join(__dirname, <span class=\"string\">&#x27;smoke/template/&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;builder-webpack test code&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./unit/webpack-base-test&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>创建单元测试文件<code>webpack-base-test.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;assert&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;webpack.base.js test  case&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../lib/webpack.base.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">&#x27;entry&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.equal(baseConfig.entry.index, <span class=\"string\">&#x27;D:/demo/wp-demo/builder-webpack/test/smoke/template/src/index/index.js&#x27;</span>);</span><br><span class=\"line\">        assert.equal(baseConfig.entry.search, <span class=\"string\">&#x27;D:/demo/wp-demo/builder-webpack/test/smoke/template/src/search/index.js&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在<code>package.json</code>中的<code>scripts</code>字段增加<code>test</code>命令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;node_modules/mocha/bin/_mocha&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行测试命令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖测试\"><a href=\"#覆盖测试\" class=\"headerlink\" title=\"覆盖测试\"></a>覆盖测试</h3><p>这里推荐使用<a href=\"https://istanbul.js.org/\">instanful</a></p>\n<p>npm 或者yarn 安装好之后，在<code>package.json</code>中的<code>scripts</code>字段修改<code>test</code>命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;istanbul cover ./node_modules/mocha/bin/_mocha&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>::: tip 作用</p>\n<ol>\n<li><p>快速发现错误；</p>\n</li>\n<li><p>防止分支大幅偏离主干；</p>\n</li>\n</ol>\n<p>核心措施是，代码集成到主干之前，必须通过自动化测试。只要一个测试用例失败，就不能集成。<br>:::</p>\n<h3 id=\"接入Travis-CI\"><a href=\"#接入Travis-CI\" class=\"headerlink\" title=\"接入Travis CI\"></a>接入Travis CI</h3><ol>\n<li><p><a href=\"https://travis-ci.org/\">https://travis-ci.org/</a> 使用 Github 账号登录；</p>\n</li>\n<li><p>在<a href=\"http://travis-ci.org/account/repositories\">http://travis-ci.org/account/repositories</a>为项目开启</p>\n</li>\n<li><p>项目根目录下新增 .travis.yml</p>\n</li>\n</ol>\n<h3 id=\"接入实操\"><a href=\"#接入实操\" class=\"headerlink\" title=\"接入实操\"></a>接入实操</h3><p>首先在github上面创建一个repository，然后将我们之前写的<code>builder-webpack</code>放在文件夹中，之后我们可以访问上面的travis CI网站看到我们的项目。</p>\n<p>我们在项目根目录中新增<code>.travis.yml</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sudo</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache</span>: </span><br><span class=\"line\">    apt: <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">directories</span>: </span><br><span class=\"line\">        - node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">node_js</span>: stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install</span>: </span><br><span class=\"line\">    - npm install -D</span><br><span class=\"line\">    - cd ./test/smoke/template</span><br><span class=\"line\">    - npm install -D</span><br><span class=\"line\">    - cd ../../../</span><br><span class=\"line\"></span><br><span class=\"line\">scripts:</span><br><span class=\"line\">    - npm test</span><br></pre></td></tr></table></figure>\n\n<p>将代码push到github，之后便可以在travis CI 看到我们项目的构建</p>\n<p><a data-fancybox title=\"travis CI\" href=\"https://img-blog.csdnimg.cn/20200426163643379.png\"><img src=\"https://img-blog.csdnimg.cn/20200426163643379.png\" alt=\"travis CI\"></a></p>\n<h2 id=\"发布构建包到npm\"><a href=\"#发布构建包到npm\" class=\"headerlink\" title=\"发布构建包到npm\"></a>发布构建包到npm</h2><p>首先在npm官网查看下需要发布的包名有没有重复</p>\n<p>然后命令行运行<code>npm login</code>登录你的npm账号</p>\n<p>执行<code>npm publish</code>发布版本</p>\n<p>升级版本</p>\n<ol>\n<li><p>升级补丁版本号：<code>npm version patch</code></p>\n</li>\n<li><p>升级小版本号：<code>npm version minor</code></p>\n</li>\n<li><p>升级大版本号：<code>npm version major</code></p>\n</li>\n</ol>\n<h2 id=\"开源项目版本信息案例\"><a href=\"#开源项目版本信息案例\" class=\"headerlink\" title=\"开源项目版本信息案例\"></a>开源项目版本信息案例</h2><p>软件的版本通常由三位组成，形如：X.Y.Z</p>\n<p>版本是严格递增的</p>\n<p>在发布重要版本时，可以发布alpha、rc等先行版本</p>\n<p>::: tip 优势</p>\n<ol>\n<li><p>避免出现循环依赖</p>\n</li>\n<li><p>依赖冲突减少<br>:::</p>\n</li>\n</ol>\n<p>::: tip 语义化版本（Semantic Versioning）规范格式<br>主版本号：当你做了不兼容的API修改</p>\n<p>次版本号：当你做了向下兼容的功能性新增</p>\n<p>修订号：当你做了向下兼容的问题修正<br>:::</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"构建配置管理\"><a href=\"#构建配置管理\" class=\"headerlink\" title=\"构建配置管理\"></a>构建配置管理</h2><h3 id=\"构建配置抽离成-npm-包的意义\"><a href=\"#构建配置抽离成-npm-包的意义\" class=\"headerlink\" title=\"构建配置抽离成 npm 包的意义\"></a>构建配置抽离成 npm 包的意义</h3><p>::: tip 通用性</p>\n<ol>\n<li>业务开发者无需关注构建配置</li>\n<li>统一团队构建脚本<br>:::</li>\n</ol>\n<p>::: tip 可维护性</p>\n<ol>\n<li>构建配置合理的拆分</li>\n<li>README 文档、ChangeLog 文档等<br>:::</li>\n</ol>\n<p>::: tip 质量</p>\n<ol>\n<li>冒烟测试、单元测试、测试覆盖等</li>\n<li>持续集成<br>:::</li>\n</ol>\n<h3 id=\"可选方案\"><a href=\"#可选方案\" class=\"headerlink\" title=\"可选方案\"></a>可选方案</h3><p>1、通过多个配置文件管理不同环境的构建， webpack –config 参数进行控制；</p>\n<p>2、将构建配置设计成一个库，比如：hjs-webpack、Neutrino、webpack-blocks；</p>\n<p>3、抽成一个工具进行管理，比如：create-react-app、kyt、nwb；（人数规模较大）</p>\n<p>4、将所有的配置放在一个文件，通过–env 参数控制分支选择；</p>\n<h3 id=\"构建配置包设计\"><a href=\"#构建配置包设计\" class=\"headerlink\" title=\"构建配置包设计\"></a>构建配置包设计</h3><p>(1)、通过多个配置文件管理不同环境的 webpack 配置</p>\n<ol>\n<li>基础配置：webpack.base.js</li>\n<li>开发环境：webpack.dev.js</li>\n<li>生产环境：webpack.prod.js</li>\n<li>SSR环境：webpack.ssr.js</li>\n</ol>\n<p>(2)、抽离成一个 npm 包统一管理<br>规范：Git commit 日志、README、ESLint 规范、Semver 规范<br>质量：冒烟测试、单元测试、测试覆盖率和CI</p>\n<h3 id=\"配置组合\"><a href=\"#配置组合\" class=\"headerlink\" title=\"配置组合\"></a>配置组合</h3><p>通过 <code>webpack-merge</code> 组合配置</p>\n<p>合并配置: module.exports = merge(baseConfig, devConfig);</p>\n<h3 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h3><p><a data-fancybox title=\"目录结构\" href=\"https://img-blog.csdnimg.cn/20200419112012211.png\"><img src=\"https://img-blog.csdnimg.cn/20200419112012211.png\" alt=\"目录结构\"></a></p>\n<p>::: tip 引入<br>如上图创建我们的目录结构，然后针对对应的功能需求添加到相应模块，base.js用于作为我们的基础模块，之后针对每个打包情况的特殊性再对相应模块进行特殊化；<br>最后使用merge的方法串联起来。<br>:::<br>比如，我创建了之前学习文章中的功能集合，添加再base.js中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-externals-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;friendly-errors-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> HtmlWebpackPlugins = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">&#x27;./src/*/index.js&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    entryFiles.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entryFile = item;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageName = match &amp;&amp; match[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        entry[pageName] = entryFile;</span><br><span class=\"line\">        HtmlWebpackPlugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">                <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;pageName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">`<span class=\"subst\">$&#123;pageName&#125;</span>.html`</span>,</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: [pageName],</span><br><span class=\"line\">                <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        entry,</span><br><span class=\"line\">        HtmlWebpackPlugins</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, HtmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: [  </span><br><span class=\"line\">                    <span class=\"string\">&#x27;babel-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/.less$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;less-loader&#x27;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                            <span class=\"attr\">plugins</span>: <span class=\"function\">() =&gt;</span> [</span><br><span class=\"line\">                                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class=\"line\">                                    <span class=\"attr\">overrideBrowserslist</span>: [<span class=\"string\">&#x27;last 2 version&#x27;</span>, <span class=\"string\">&#x27;&gt;1%&#x27;</span>, <span class=\"string\">&#x27;ios 7&#x27;</span>]</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">//以下为添加内容</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name]_[hash:8].[ext]&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">                use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin(),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.hooks.done.tap(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stats.compilation.errors &amp;&amp; process.argv.indexOf(<span class=\"string\">&#x27;--watch&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;build error&#x27;</span>);</span><br><span class=\"line\">                    process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ].concat(HtmlWebpackPlugins),</span><br><span class=\"line\">    <span class=\"attr\">stats</span>: <span class=\"string\">&#x27;errors-only&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>webpack.dev.js</code>中对开发环境进行特殊化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.base&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> devConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">&#x27;./dist&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>  <span class=\"comment\">// webpack文档表明配置了此会自动引入这个插件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(baseConfig, devConfig);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中针对开发环境添加了热更新功能，其它环境的文件也是类似上面代码，进行特殊化添加，最后使用merge串联起来。</p>\n<p>其余代码：<a href=\"https://github.com/KoWhite/webpack-demo/tree/1787f9a4f8414dc6c73ec2711cc30bfafc16b4df/builder-webpack\">github</a></p>\n<h2 id=\"使用ESLint-规范构建脚本\"><a href=\"#使用ESLint-规范构建脚本\" class=\"headerlink\" title=\"使用ESLint 规范构建脚本\"></a>使用ESLint 规范构建脚本</h2><p>使用<code>eslint-config-airbnb-base</code>, <code>eslint --fix</code> 可以自动处理空格</p>\n<h2 id=\"冒烟测试\"><a href=\"#冒烟测试\" class=\"headerlink\" title=\"冒烟测试\"></a>冒烟测试</h2><p>::: tip 概念<br>冒烟测试是指对提交测试的软件在进行详细深入的测试之前进行的预测试</p>\n<p>目的是暴露导致软件重新发布的基本功能失效等严重问题<br>:::</p>\n<p>::: tip 步骤</p>\n<ol>\n<li><p>构建是否成功</p>\n</li>\n<li><p>每次构建完成build目录是否有内容输出</p>\n</li>\n</ol>\n<p>是否有JS、CSS等静态资源文件</p>\n<p>是否有HTML文件<br>:::</p>\n<h3 id=\"判断构建是否成功\"><a href=\"#判断构建是否成功\" class=\"headerlink\" title=\"判断构建是否成功\"></a>判断构建是否成功</h3><p>（1）可以通过<code>npm script</code> 中配置构建命令，通过命令行开始构建判断构建是否成功</p>\n<p>（2）首先我们创建一个测试的路口文件，在<code>test</code>文件夹下创建<code>smoke</code>文件夹，在此文件夹下创建<code>index.js</code>文件</p>\n<p>然后在<code>smoke</code>下创建<code>template</code>文件夹放置我们文章之前的代码，删除多余的webpack配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rimraf = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;rimraf&#x27;</span>); <span class=\"comment\">// 需要先安装rimraf</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.chdir(path.join(__dirname, <span class=\"string\">&#x27;template&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作用是先将./dist移除。第二个参数是移除完成之后的回调</span></span><br><span class=\"line\">rimraf(<span class=\"string\">&#x27;./dist&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prodConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../lib/webpack.prod.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行配置文件，第二个参数是执行完成之后的回调，一个是错误参数，一个是状态码</span></span><br><span class=\"line\">    webpack(prodConfig, <span class=\"function\">(<span class=\"params\">err, stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">            process.exit(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stats.toString(&#123;</span><br><span class=\"line\">            <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">modules</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Webpack build success, begin run test&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断基本功能是否正常\"><a href=\"#判断基本功能是否正常\" class=\"headerlink\" title=\"判断基本功能是否正常\"></a>判断基本功能是否正常</h3><p>以mocha为例，编写mocha测试用例，判断构建是否有内容输出</p>\n<p>安装mocha：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mocha -D</span><br></pre></td></tr></table></figure>\n\n<p>首先我们在<code>index.js</code>同层级下创建<code>html-test.js</code>，此文件用于检测是否有html文件输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先需要npm安装glob-all</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob-all&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Checking generated html files&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    it (<span class=\"string\">&#x27;should generated html false&#x27;</span>, <span class=\"function\">(<span class=\"params\">done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> files = glob.sync([</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index.html&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search.html&#x27;</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            done();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;no html files generated&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们再同层级下创建<code>css-js-test.js</code>，此文件用于检测是否有css/js文件输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob-all&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Checking generated css js files&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    it (<span class=\"string\">&#x27;should generated css js false&#x27;</span>, <span class=\"function\">(<span class=\"params\">done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> files = glob.sync([</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index_*.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/index_*.css&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search_*.js&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;./dist/search_*.css&#x27;</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            done();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;no css js files generated&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后我们在命令行中执行<code>node test/smoke/index.js</code></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1101741181366880\">mocha教程</a></p>\n<h2 id=\"单元测试和测试覆盖率\"><a href=\"#单元测试和测试覆盖率\" class=\"headerlink\" title=\"单元测试和测试覆盖率\"></a>单元测试和测试覆盖率</h2><p>接下来以mocha为例</p>\n<ol>\n<li><p>技术选型：Mocha + Chai</p>\n</li>\n<li><p>测试代码：describe, it, except</p>\n</li>\n<li><p>测试命令：mocha add.test.js</p>\n</li>\n</ol>\n<h3 id=\"单元测试接入\"><a href=\"#单元测试接入\" class=\"headerlink\" title=\"单元测试接入\"></a>单元测试接入</h3><ol>\n<li>安装 mocha + chai</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mocha chai -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建<code>test</code>目录，并增加<code>xxx.test.js</code>测试文件</li>\n</ol>\n<p>创建测试文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.chdir(path.join(__dirname, <span class=\"string\">&#x27;smoke/template/&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;builder-webpack test code&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./unit/webpack-base-test&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>创建单元测试文件<code>webpack-base-test.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;assert&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;webpack.base.js test  case&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../lib/webpack.base.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">&#x27;entry&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.equal(baseConfig.entry.index, <span class=\"string\">&#x27;D:/demo/wp-demo/builder-webpack/test/smoke/template/src/index/index.js&#x27;</span>);</span><br><span class=\"line\">        assert.equal(baseConfig.entry.search, <span class=\"string\">&#x27;D:/demo/wp-demo/builder-webpack/test/smoke/template/src/search/index.js&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在<code>package.json</code>中的<code>scripts</code>字段增加<code>test</code>命令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;node_modules/mocha/bin/_mocha&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行测试命令</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖测试\"><a href=\"#覆盖测试\" class=\"headerlink\" title=\"覆盖测试\"></a>覆盖测试</h3><p>这里推荐使用<a href=\"https://istanbul.js.org/\">instanful</a></p>\n<p>npm 或者yarn 安装好之后，在<code>package.json</code>中的<code>scripts</code>字段修改<code>test</code>命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;istanbul cover ./node_modules/mocha/bin/_mocha&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>::: tip 作用</p>\n<ol>\n<li><p>快速发现错误；</p>\n</li>\n<li><p>防止分支大幅偏离主干；</p>\n</li>\n</ol>\n<p>核心措施是，代码集成到主干之前，必须通过自动化测试。只要一个测试用例失败，就不能集成。<br>:::</p>\n<h3 id=\"接入Travis-CI\"><a href=\"#接入Travis-CI\" class=\"headerlink\" title=\"接入Travis CI\"></a>接入Travis CI</h3><ol>\n<li><p><a href=\"https://travis-ci.org/\">https://travis-ci.org/</a> 使用 Github 账号登录；</p>\n</li>\n<li><p>在<a href=\"http://travis-ci.org/account/repositories\">http://travis-ci.org/account/repositories</a>为项目开启</p>\n</li>\n<li><p>项目根目录下新增 .travis.yml</p>\n</li>\n</ol>\n<h3 id=\"接入实操\"><a href=\"#接入实操\" class=\"headerlink\" title=\"接入实操\"></a>接入实操</h3><p>首先在github上面创建一个repository，然后将我们之前写的<code>builder-webpack</code>放在文件夹中，之后我们可以访问上面的travis CI网站看到我们的项目。</p>\n<p>我们在项目根目录中新增<code>.travis.yml</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sudo</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache</span>: </span><br><span class=\"line\">    apt: <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">directories</span>: </span><br><span class=\"line\">        - node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">node_js</span>: stable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install</span>: </span><br><span class=\"line\">    - npm install -D</span><br><span class=\"line\">    - cd ./test/smoke/template</span><br><span class=\"line\">    - npm install -D</span><br><span class=\"line\">    - cd ../../../</span><br><span class=\"line\"></span><br><span class=\"line\">scripts:</span><br><span class=\"line\">    - npm test</span><br></pre></td></tr></table></figure>\n\n<p>将代码push到github，之后便可以在travis CI 看到我们项目的构建</p>\n<p><a data-fancybox title=\"travis CI\" href=\"https://img-blog.csdnimg.cn/20200426163643379.png\"><img src=\"https://img-blog.csdnimg.cn/20200426163643379.png\" alt=\"travis CI\"></a></p>\n<h2 id=\"发布构建包到npm\"><a href=\"#发布构建包到npm\" class=\"headerlink\" title=\"发布构建包到npm\"></a>发布构建包到npm</h2><p>首先在npm官网查看下需要发布的包名有没有重复</p>\n<p>然后命令行运行<code>npm login</code>登录你的npm账号</p>\n<p>执行<code>npm publish</code>发布版本</p>\n<p>升级版本</p>\n<ol>\n<li><p>升级补丁版本号：<code>npm version patch</code></p>\n</li>\n<li><p>升级小版本号：<code>npm version minor</code></p>\n</li>\n<li><p>升级大版本号：<code>npm version major</code></p>\n</li>\n</ol>\n<h2 id=\"开源项目版本信息案例\"><a href=\"#开源项目版本信息案例\" class=\"headerlink\" title=\"开源项目版本信息案例\"></a>开源项目版本信息案例</h2><p>软件的版本通常由三位组成，形如：X.Y.Z</p>\n<p>版本是严格递增的</p>\n<p>在发布重要版本时，可以发布alpha、rc等先行版本</p>\n<p>::: tip 优势</p>\n<ol>\n<li><p>避免出现循环依赖</p>\n</li>\n<li><p>依赖冲突减少<br>:::</p>\n</li>\n</ol>\n<p>::: tip 语义化版本（Semantic Versioning）规范格式<br>主版本号：当你做了不兼容的API修改</p>\n<p>次版本号：当你做了向下兼容的功能性新增</p>\n<p>修订号：当你做了向下兼容的问题修正<br>:::</p>\n"},{"title":"webpack进阶","date":"2021-11-19T03:54:16.000Z","_content":"\n# 高级用法\n\n## 自动清理构建目录\n\n### 1、通过npm script清理构建目录（不够优雅）\n\n``` javaScript \nrm -rf ./dist && webpack\nrimraf ./dist && webpack\n```\n\n### 2、借助clean-webpack-plugin （默认会删除output指定的输出目录）\n\n（1）安装\n\n```javaScript\nnpm i clean-webpack-plugin -D\n```\n\nor\n\n```javaScript\nyarn add clean-webpack-plugin -D\n```\n\n（2）使用这个插件\n首先在webpack配置文件引入这个插件：\n\n```javaScript\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n```\n\n然后在plugins中：\n\n```javaScript\n+ new CleanWebpackPlugin()\n```\n\n## 使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\n\n根据 can i use (https://caniuse.com/)规则\n（1）安装\n\n```javaScript\nnpm i postcss-loader autoprefixer -D\n```\n\nor\n\n```javaScript\nyarn add postcss-loader autoprefixer -D\n```\n\n## 通过webpack进行px转化为rem\n\n（1）安装\n\n```javaScript\nnpm i px2rem-loader -D\nnpm i lib-flexible -S\n```\n\nor\n\n```javaScript\nyarn add px2rem-loader -D\nyarn add lib-flexible -S\n```\n\n## 静态资源内联\n\n## 多页面打包方案\n\n::: tip 思路\n每个页面对应一个entry，一个html-webpack-plugin\n手动添加灵活性差，可以利用glob.sync\nentry: glob.sync(path.join(__dirname, './src/*/index.js'))\n:::\n（1）安装Glob\n\n```javaScript\nnpm i glob -D\n```\n\nor\n\n```javaScript\nyarn add glob -D\n```\n\n（2）使用\n首先需要明白，glob.sync可以帮助我们获取到所有src文件夹下面的index.js入口，我们根据这个功能来展开\n\n引入glob\n\n```javaScript\nconst glob = require('glob');\n```\n\n然后我们可以写一个函数以动态的创建入口和出口\n\n```javaScript\nconst setMPA = () => {\n    const entry = {}; // 存储输入\n    const HtmlWebpackPlugins = [];// 存储对应插件配置\n\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js')) // 获取所有文件夹下的index.js路径\n\n    entryFiles.map((item, index) => {\n        const entryFile = item;\n        const match = entryFile.match(/src\\/(.*)\\/index\\.js/); // 通过正则表达式\n        const pageName = match && match[1]; // 获取index.js父文件夹的名称\n\n        entry[pageName] = entryFile; // 创建输入\n        HtmlWebpackPlugins.push(\n            new HtmlWebpackPlugin ({\n                template: path.join(__dirname, `src/${pageName}/index.html`),\n                filename: `${pageName}.html`,\n                chunks: [pageName],\n                inject: true,\n                minify: {\n                    html5: true,\n                    collapseWhitespace: true,\n                    preserveLineBreaks: false,\n                    minifyCSS: true,\n                    minifyJS: true,\n                    removeComments: false\n                }\n            })\n        ); // 以数组的形式存储输出口\n    })\n\n    return {\n        entry,\n        HtmlWebpackPlugins\n    }\n}\n```\n\n定义好函数之后，我们将对应数据配置\n\n```javaScript\nconst { entry, HtmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry, // 入口数据\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    ...\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new OptimizeCSSAssetsPlugin ({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        new CleanWebpackPlugin()\n    ].concat(HtmlWebpackPlugins) // 连接两个数组\n```\n\n以上便是当多页面情况的处理方式，灵活性高，后期可以根据项目任意修改\n\n## 使用sourcemap\n\n::: tip 功能\n<http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html>\n开发环境开启，线上环境关闭（容易暴露业务逻辑）\n线上排查问题的时候可将sourcemap上传到错误监控系统\n:::\n（1）关键字\neval: 使用eval包裹模块代码\n\nsource map: 产生.map文件\n\ncheap: 不包含列信息\n\ninline: 将.map作为DataURI嵌入，不单独生成.map文件\n\nmodule: 包含loader的sourcemap\n\n（2）具体功能细化\n<https://segmentfault.com/a/1190000016404266?utm_source=tag-newest>\n\n## 提取页面公共资源\n\n### 基础库分离（以react为例）\n\n（1）通过html-webpack-externals-plugin\n::: tip\n思路：将react、react-dom 基础包通过cdn引入，不打入bundle中\n方法：使用html-webpack-externals-plugin\n:::\n\n```javaScript\nconst HtmlWebpackExternalsPlugin = require('html-webpack-externals-plugin');\n\nplugin: [\n    new HtmlWebpackExternalsPlugin({\n        externals: [\n            {\n                module: 'react',\n                entry: 'https://unpkg.com/react@16/umd/react.development.js',\n                global: 'React'\n            },{\n                module: 'react-dom',\n                entry: 'https://unpkg.com/react-dom@16/umd/react-dom.development.js',\n                global: 'ReactDOM'\n            }\n        ]\n    })\n]\n```\n\n（1）利用SplitChunksPlugin 进行公共脚本分离\nwebpack4内置的，替代CommonsChunkPlugin插件\n\nchunks 参数说明：\n\n1. async异步引入的库进行分离\n\n2. inital 同步引入的库进行分离\n\n3. all 所有引入的库进行分离\n\n```javaScript\noptimization: {\n    splitChunks: {\n        minSize: 0, // 分离的包体积大小\n        cacheGroups: {\n            commons: {\n                test: /(react|react-dom)/, // 匹配出需要分离的包\n                name: 'vendonrs', \n                chunks: 'all',\n                minChunls: 2 // 设置最小的引用次数为2次\n            }\n        }\n    }\n}\n```\n\n## tree shaking (摇树优化)\n\n::: tip 概念\n一模块可能有多个方法，只要其中的某个方法使用到，则整个文件都会被打到bundle里，tree shaking就是只把用到的方法打到bundle，没用到的方法会在uglify阶段被擦除掉\n:::\n\n::: tip 使用\nwebpack 默认支持，在.babelrc里设置 modules: false 即可\n:::\n\n:::tip 要求\n必须是ES6的语法，CJS的方式不支持\n:::\n\n:::tip 原理\n利用ES6模块的特点：\n\n1. 只能作为模块顶层的语句出现\n2. import的模块名只能是字符串常量\n3. import binding 是immutable的\n\nES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析（不执行代码，从字面量上对代码进行分析，ES6之前的模块化，比如我们可以动态require一个模块，只有执行后才知道引用的什么模块，这就不能通过静态分析去优化）\n\n代码擦除： uglify阶段删除无用代码\n:::\n\n## Scope Hoisting使用和原理分析\n\n::: warning 引入\n没有开启Scope Hoisting时会出现有大量闭包函数的代码；\n大量函数闭包包裹代码，导致体积增大（模块越多越明显）\n运行代码时创建的函数作用域变多，内存开销变大\n\n结论： 被webpack转换后的模块会带上一层包裹，import会被转换成_webpack_require\n:::\n\n::: tip 原理\n将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突\n:::\n\n::: tip 优势\n通过scope hoisting 可以减少函数声明代码和内存开销\n:::\n\n::: tip 使用\nwebpack mode 为 production 默认开启\n必须是ES6语法\n:::\n\n## 代码分割和动态import\n\n::: tip 懒加载JS方式\nCommonJS: require.ensure\nES6: 动态import（目前没有原生支持，需要Babel转换）\n:::\n\n### 动态import使用方法\n\n1、安装\n\n```javaScript\nnpm i @babel/plugin-syntax-dynamic-import --sava-dev\n```\n\nor\n\n```javaScript\nyarn add @babel/plugin-syntax-dynamic-import --sava-dev\n```\n\n2、ES6: 动态import\n借助babel，在.babelrc中添加以下插件\n\n```javaScript\n\"plugin\": [\"@babel/plugin-syntax-dynamic-import\"],\n```\n\n## webpack使用ESLint \n\n::: tip 意义\n对代码进行规范检查，避免语法错误\n:::\n\n### 方案一：ESLint与CI/CD集成\n\n### 方案二：webpack与ESLint集成(<https://eslint.bootcss.com/>)\n\n<https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb>\n\n## webpack 打包组件或者基础库\n\nwebpack除了可以用来打包应用，也可以用来打包js库\n\n## webpack实现SSR打包\n\n::: tip 服务端渲染（SSR）是什么\n渲染：HTML+CSS+JS+DATA -> 渲染后的HTML\n\n服务端：\n所有模板等资源都存储在服务端\n内网机器拉取数据更快\n一个HTML返回所有数据\n:::\n\n### 客户端渲染（CSR）和服务端渲染（SSR）比对\n\n<a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111127675.png\">![CSR\\SSR](https://img-blog.csdnimg.cn/20200417111127675.png)</a>\n\n<a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111343821.png\">![CSR\\SSR](https://img-blog.csdnimg.cn/20200417111343821.png)</a>\n\n### SSR代码实现思路\n\n（1）服务端\n使用 react-dom/server 的 renderToString 方法将React组件渲染成字符串\n\n服务端路由返回对应的模板\n\n（2）客户端\n打包出针对服务端的组件\n\n### 搭建SSR\n\n1、创建服务端环境\n在当前项目中创建server文件夹，接下来将用express帮助搭建服务端环境\n安装express\n\n```javaScript\nnpm i express -D\n```\n\n在server中创建index.js入口文件\n\n``` javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\n\nserver (process.env.PORT || 3000);\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    return `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Document</title>\n        </head>\n        <body>\n            <div className=\"root\">\n                ${str}\n            </div>\n        </body>\n        </html>\n    `;\n}\n```\n\n2、创建一个ssr打包\n首先创建一个打包文件,注意js的命名不再需要hash，然后在npm Script配置，假设我这里创建名字叫webpack.ssr.js\n而后我们在npm Script中配置`\"build:ssr\": \"webpack --config webpack.ssr.js\"`以创建一个打包命令\n\n### webpack ssr 打包存在的问题\n\n1. 浏览器的全局变量（Node.js中没有document，window）\n    组件适配：将不兼容的组件根据打包环境进行适配\n    请求适配：将fetch或者ajax发送请求的写法改成isomorphic-fetch 或者 axios\n\n2. 样式问题（Node.js 无法解析 css)\n    方案一：服务端打包通过ignore-loader忽略掉css的解析\n    方案二：将 style-loader 替换成 isomorphic-style-loader\n\n### 如何解决样式不显示的问题\n\n使用打包出来的浏览器端html为模板\n设置占位符，动态插入组件\n\n针对样式不显示的情况我们接下来修改server下面的index.js\n\n```javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\nconst template = fs.readFileSync(path.join(__dirname, '../dist/search.html'), 'utf-8');\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\nserver (process.env.PORT || 3000);\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    return template.replace('<!--HTML_PLACEHOLDER-->', str);\n}\n```\n\n然后修改我们的serch.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"root\"><!--HTML_PLACEHOLDER--></div>\n</body>\n</html>\n```\n\n针对数据的情况，我们同样也可以通过占位符的方式来处理\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"root\"><!--HTML_PLACEHOLDER--></div>\n    <!--INITIAL_DATA_PLACEHOLDER-->\n</body>\n</html>\n```\n\n修改server/index.js\n\n```javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\nconst template = fs.readFileSync(path.join(__dirname, '../dist/search.html'), 'utf-8');\nconst data = require('../data.json');\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\nserver (process.env.PORT || 3000);\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    const dataStr = JSON.stringify(data);\n    return template.replace('<!--HTML_PLACEHOLDER-->', str)\n        .replace('<!--INITIAL_DATA_PLACEHOLDER-->', `<script>window.__initial_data=${dataStr}</script>`)\n}\n```\n\n## 优化构建时命令行显示日志\n\n::: tip 需求\n构建时展示的一大堆日志，很多并不需要开发者关注\n:::\n通过设置stats来优化，开发阶段放在devServer，生产阶段放在module.exports中。\n设置的属性参考<https://www.webpackjs.com/configuration/stats/>\n\n除了设置stats的方式，还可以通过`friendly-errors-webpack-plugin`,并且设置`stats: errors-only`\n\n1、安装\n\n```javaScript\nnpm i friendly-errors-webpack-plugin -D\n```\n\nor\n\n```javaScript\nyarn add friendly-errors-webpack-plugin -D\n```\n\n2、使用\n在生产环境和开发环境中引入对应插件即可：\n\n```javaScript\nconst FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');\n\n plugins: [\n    ...\n    new FriendlyErrorsWebpackPlugin()\n ]\n```\n\n## 在webpack中进行错误捕获及异常处理\n\n::: tip 需求\n在 CI/CD 的 pipline 或者发布系统需要知道当前构建状态\n\n每次构建完成后输入 echo $? 获取错误码\n:::\n\n::: danger 注意\nwebpack4 之前版本构建失败不会抛出错误码（error code）\n\nNode.js 中的 process.exit 规范\n0 表示成功完成，回掉函数中，err为null\n非 0 表示执行失败，回掉函数中，err不为null，err.code 就是传给 exit 的数字\n:::\n\n::: tip 如何捕获\ncompiler 在每次构建结束后会触发 done 这个 hook\nprocess.exit 主动处理构建报错\n:::\n\n通过在plugins中增加这段\n\n```javaScript\nfunction () {\n    this.hooks.done.tap('done', (stats) => {\n        if (stats.compilation.errors && process.argv.indexOf('--watch') == -1) {\n            console.log('build error');\n            process.exit(1);\n        }\n    })\n}\n```\n","source":"_posts/webpack进阶.md","raw":"---\ntitle: webpack进阶\ndate: 2021-11-19 11:54:16\ntags:\n---\n\n# 高级用法\n\n## 自动清理构建目录\n\n### 1、通过npm script清理构建目录（不够优雅）\n\n``` javaScript \nrm -rf ./dist && webpack\nrimraf ./dist && webpack\n```\n\n### 2、借助clean-webpack-plugin （默认会删除output指定的输出目录）\n\n（1）安装\n\n```javaScript\nnpm i clean-webpack-plugin -D\n```\n\nor\n\n```javaScript\nyarn add clean-webpack-plugin -D\n```\n\n（2）使用这个插件\n首先在webpack配置文件引入这个插件：\n\n```javaScript\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n```\n\n然后在plugins中：\n\n```javaScript\n+ new CleanWebpackPlugin()\n```\n\n## 使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\n\n根据 can i use (https://caniuse.com/)规则\n（1）安装\n\n```javaScript\nnpm i postcss-loader autoprefixer -D\n```\n\nor\n\n```javaScript\nyarn add postcss-loader autoprefixer -D\n```\n\n## 通过webpack进行px转化为rem\n\n（1）安装\n\n```javaScript\nnpm i px2rem-loader -D\nnpm i lib-flexible -S\n```\n\nor\n\n```javaScript\nyarn add px2rem-loader -D\nyarn add lib-flexible -S\n```\n\n## 静态资源内联\n\n## 多页面打包方案\n\n::: tip 思路\n每个页面对应一个entry，一个html-webpack-plugin\n手动添加灵活性差，可以利用glob.sync\nentry: glob.sync(path.join(__dirname, './src/*/index.js'))\n:::\n（1）安装Glob\n\n```javaScript\nnpm i glob -D\n```\n\nor\n\n```javaScript\nyarn add glob -D\n```\n\n（2）使用\n首先需要明白，glob.sync可以帮助我们获取到所有src文件夹下面的index.js入口，我们根据这个功能来展开\n\n引入glob\n\n```javaScript\nconst glob = require('glob');\n```\n\n然后我们可以写一个函数以动态的创建入口和出口\n\n```javaScript\nconst setMPA = () => {\n    const entry = {}; // 存储输入\n    const HtmlWebpackPlugins = [];// 存储对应插件配置\n\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js')) // 获取所有文件夹下的index.js路径\n\n    entryFiles.map((item, index) => {\n        const entryFile = item;\n        const match = entryFile.match(/src\\/(.*)\\/index\\.js/); // 通过正则表达式\n        const pageName = match && match[1]; // 获取index.js父文件夹的名称\n\n        entry[pageName] = entryFile; // 创建输入\n        HtmlWebpackPlugins.push(\n            new HtmlWebpackPlugin ({\n                template: path.join(__dirname, `src/${pageName}/index.html`),\n                filename: `${pageName}.html`,\n                chunks: [pageName],\n                inject: true,\n                minify: {\n                    html5: true,\n                    collapseWhitespace: true,\n                    preserveLineBreaks: false,\n                    minifyCSS: true,\n                    minifyJS: true,\n                    removeComments: false\n                }\n            })\n        ); // 以数组的形式存储输出口\n    })\n\n    return {\n        entry,\n        HtmlWebpackPlugins\n    }\n}\n```\n\n定义好函数之后，我们将对应数据配置\n\n```javaScript\nconst { entry, HtmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry, // 入口数据\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    ...\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new OptimizeCSSAssetsPlugin ({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        new CleanWebpackPlugin()\n    ].concat(HtmlWebpackPlugins) // 连接两个数组\n```\n\n以上便是当多页面情况的处理方式，灵活性高，后期可以根据项目任意修改\n\n## 使用sourcemap\n\n::: tip 功能\n<http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html>\n开发环境开启，线上环境关闭（容易暴露业务逻辑）\n线上排查问题的时候可将sourcemap上传到错误监控系统\n:::\n（1）关键字\neval: 使用eval包裹模块代码\n\nsource map: 产生.map文件\n\ncheap: 不包含列信息\n\ninline: 将.map作为DataURI嵌入，不单独生成.map文件\n\nmodule: 包含loader的sourcemap\n\n（2）具体功能细化\n<https://segmentfault.com/a/1190000016404266?utm_source=tag-newest>\n\n## 提取页面公共资源\n\n### 基础库分离（以react为例）\n\n（1）通过html-webpack-externals-plugin\n::: tip\n思路：将react、react-dom 基础包通过cdn引入，不打入bundle中\n方法：使用html-webpack-externals-plugin\n:::\n\n```javaScript\nconst HtmlWebpackExternalsPlugin = require('html-webpack-externals-plugin');\n\nplugin: [\n    new HtmlWebpackExternalsPlugin({\n        externals: [\n            {\n                module: 'react',\n                entry: 'https://unpkg.com/react@16/umd/react.development.js',\n                global: 'React'\n            },{\n                module: 'react-dom',\n                entry: 'https://unpkg.com/react-dom@16/umd/react-dom.development.js',\n                global: 'ReactDOM'\n            }\n        ]\n    })\n]\n```\n\n（1）利用SplitChunksPlugin 进行公共脚本分离\nwebpack4内置的，替代CommonsChunkPlugin插件\n\nchunks 参数说明：\n\n1. async异步引入的库进行分离\n\n2. inital 同步引入的库进行分离\n\n3. all 所有引入的库进行分离\n\n```javaScript\noptimization: {\n    splitChunks: {\n        minSize: 0, // 分离的包体积大小\n        cacheGroups: {\n            commons: {\n                test: /(react|react-dom)/, // 匹配出需要分离的包\n                name: 'vendonrs', \n                chunks: 'all',\n                minChunls: 2 // 设置最小的引用次数为2次\n            }\n        }\n    }\n}\n```\n\n## tree shaking (摇树优化)\n\n::: tip 概念\n一模块可能有多个方法，只要其中的某个方法使用到，则整个文件都会被打到bundle里，tree shaking就是只把用到的方法打到bundle，没用到的方法会在uglify阶段被擦除掉\n:::\n\n::: tip 使用\nwebpack 默认支持，在.babelrc里设置 modules: false 即可\n:::\n\n:::tip 要求\n必须是ES6的语法，CJS的方式不支持\n:::\n\n:::tip 原理\n利用ES6模块的特点：\n\n1. 只能作为模块顶层的语句出现\n2. import的模块名只能是字符串常量\n3. import binding 是immutable的\n\nES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析（不执行代码，从字面量上对代码进行分析，ES6之前的模块化，比如我们可以动态require一个模块，只有执行后才知道引用的什么模块，这就不能通过静态分析去优化）\n\n代码擦除： uglify阶段删除无用代码\n:::\n\n## Scope Hoisting使用和原理分析\n\n::: warning 引入\n没有开启Scope Hoisting时会出现有大量闭包函数的代码；\n大量函数闭包包裹代码，导致体积增大（模块越多越明显）\n运行代码时创建的函数作用域变多，内存开销变大\n\n结论： 被webpack转换后的模块会带上一层包裹，import会被转换成_webpack_require\n:::\n\n::: tip 原理\n将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突\n:::\n\n::: tip 优势\n通过scope hoisting 可以减少函数声明代码和内存开销\n:::\n\n::: tip 使用\nwebpack mode 为 production 默认开启\n必须是ES6语法\n:::\n\n## 代码分割和动态import\n\n::: tip 懒加载JS方式\nCommonJS: require.ensure\nES6: 动态import（目前没有原生支持，需要Babel转换）\n:::\n\n### 动态import使用方法\n\n1、安装\n\n```javaScript\nnpm i @babel/plugin-syntax-dynamic-import --sava-dev\n```\n\nor\n\n```javaScript\nyarn add @babel/plugin-syntax-dynamic-import --sava-dev\n```\n\n2、ES6: 动态import\n借助babel，在.babelrc中添加以下插件\n\n```javaScript\n\"plugin\": [\"@babel/plugin-syntax-dynamic-import\"],\n```\n\n## webpack使用ESLint \n\n::: tip 意义\n对代码进行规范检查，避免语法错误\n:::\n\n### 方案一：ESLint与CI/CD集成\n\n### 方案二：webpack与ESLint集成(<https://eslint.bootcss.com/>)\n\n<https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb>\n\n## webpack 打包组件或者基础库\n\nwebpack除了可以用来打包应用，也可以用来打包js库\n\n## webpack实现SSR打包\n\n::: tip 服务端渲染（SSR）是什么\n渲染：HTML+CSS+JS+DATA -> 渲染后的HTML\n\n服务端：\n所有模板等资源都存储在服务端\n内网机器拉取数据更快\n一个HTML返回所有数据\n:::\n\n### 客户端渲染（CSR）和服务端渲染（SSR）比对\n\n<a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111127675.png\">![CSR\\SSR](https://img-blog.csdnimg.cn/20200417111127675.png)</a>\n\n<a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111343821.png\">![CSR\\SSR](https://img-blog.csdnimg.cn/20200417111343821.png)</a>\n\n### SSR代码实现思路\n\n（1）服务端\n使用 react-dom/server 的 renderToString 方法将React组件渲染成字符串\n\n服务端路由返回对应的模板\n\n（2）客户端\n打包出针对服务端的组件\n\n### 搭建SSR\n\n1、创建服务端环境\n在当前项目中创建server文件夹，接下来将用express帮助搭建服务端环境\n安装express\n\n```javaScript\nnpm i express -D\n```\n\n在server中创建index.js入口文件\n\n``` javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\n\nserver (process.env.PORT || 3000);\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    return `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Document</title>\n        </head>\n        <body>\n            <div className=\"root\">\n                ${str}\n            </div>\n        </body>\n        </html>\n    `;\n}\n```\n\n2、创建一个ssr打包\n首先创建一个打包文件,注意js的命名不再需要hash，然后在npm Script配置，假设我这里创建名字叫webpack.ssr.js\n而后我们在npm Script中配置`\"build:ssr\": \"webpack --config webpack.ssr.js\"`以创建一个打包命令\n\n### webpack ssr 打包存在的问题\n\n1. 浏览器的全局变量（Node.js中没有document，window）\n    组件适配：将不兼容的组件根据打包环境进行适配\n    请求适配：将fetch或者ajax发送请求的写法改成isomorphic-fetch 或者 axios\n\n2. 样式问题（Node.js 无法解析 css)\n    方案一：服务端打包通过ignore-loader忽略掉css的解析\n    方案二：将 style-loader 替换成 isomorphic-style-loader\n\n### 如何解决样式不显示的问题\n\n使用打包出来的浏览器端html为模板\n设置占位符，动态插入组件\n\n针对样式不显示的情况我们接下来修改server下面的index.js\n\n```javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\nconst template = fs.readFileSync(path.join(__dirname, '../dist/search.html'), 'utf-8');\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\nserver (process.env.PORT || 3000);\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    return template.replace('<!--HTML_PLACEHOLDER-->', str);\n}\n```\n\n然后修改我们的serch.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"root\"><!--HTML_PLACEHOLDER--></div>\n</body>\n</html>\n```\n\n针对数据的情况，我们同样也可以通过占位符的方式来处理\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"root\"><!--HTML_PLACEHOLDER--></div>\n    <!--INITIAL_DATA_PLACEHOLDER-->\n</body>\n</html>\n```\n\n修改server/index.js\n\n```javaScript\nif (typeof window === 'undefined') {\n    global.window = {};\n}\n\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst { renderToString } = require('react-dom/server');\nconst SSR = require('../dist/search-server');\nconst template = fs.readFileSync(path.join(__dirname, '../dist/search.html'), 'utf-8');\nconst data = require('../data.json');\n\nconst server = (port) => {\n    const app = express();\n\n    app.use(express.static('dist'));\n\n    app.get('/search', (reg, res) => {\n        const html = renderMarkup(renderToString(SSR));\n        res.status(200).send(html);\n    });\n\n    // 链接监听\n    app.listen(port, () => {\n        console.log('Server is running on port:', port)\n    })\n};\n\nserver (process.env.PORT || 3000);\n\n// 创建一个HTML模板\nconst renderMarkup = (str) => {\n    const dataStr = JSON.stringify(data);\n    return template.replace('<!--HTML_PLACEHOLDER-->', str)\n        .replace('<!--INITIAL_DATA_PLACEHOLDER-->', `<script>window.__initial_data=${dataStr}</script>`)\n}\n```\n\n## 优化构建时命令行显示日志\n\n::: tip 需求\n构建时展示的一大堆日志，很多并不需要开发者关注\n:::\n通过设置stats来优化，开发阶段放在devServer，生产阶段放在module.exports中。\n设置的属性参考<https://www.webpackjs.com/configuration/stats/>\n\n除了设置stats的方式，还可以通过`friendly-errors-webpack-plugin`,并且设置`stats: errors-only`\n\n1、安装\n\n```javaScript\nnpm i friendly-errors-webpack-plugin -D\n```\n\nor\n\n```javaScript\nyarn add friendly-errors-webpack-plugin -D\n```\n\n2、使用\n在生产环境和开发环境中引入对应插件即可：\n\n```javaScript\nconst FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');\n\n plugins: [\n    ...\n    new FriendlyErrorsWebpackPlugin()\n ]\n```\n\n## 在webpack中进行错误捕获及异常处理\n\n::: tip 需求\n在 CI/CD 的 pipline 或者发布系统需要知道当前构建状态\n\n每次构建完成后输入 echo $? 获取错误码\n:::\n\n::: danger 注意\nwebpack4 之前版本构建失败不会抛出错误码（error code）\n\nNode.js 中的 process.exit 规范\n0 表示成功完成，回掉函数中，err为null\n非 0 表示执行失败，回掉函数中，err不为null，err.code 就是传给 exit 的数字\n:::\n\n::: tip 如何捕获\ncompiler 在每次构建结束后会触发 done 这个 hook\nprocess.exit 主动处理构建报错\n:::\n\n通过在plugins中增加这段\n\n```javaScript\nfunction () {\n    this.hooks.done.tap('done', (stats) => {\n        if (stats.compilation.errors && process.argv.indexOf('--watch') == -1) {\n            console.log('build error');\n            process.exit(1);\n        }\n    })\n}\n```\n","slug":"webpack进阶","published":1,"updated":"2021-11-19T03:54:57.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5unkvx000204vcecskbaju","content":"<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><h3 id=\"1、通过npm-script清理构建目录（不够优雅）\"><a href=\"#1、通过npm-script清理构建目录（不够优雅）\" class=\"headerlink\" title=\"1、通过npm script清理构建目录（不够优雅）\"></a>1、通过npm script清理构建目录（不够优雅）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ./dist &amp;&amp; webpack</span><br><span class=\"line\">rimraf ./dist &amp;&amp; webpack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、借助clean-webpack-plugin-（默认会删除output指定的输出目录）\"><a href=\"#2、借助clean-webpack-plugin-（默认会删除output指定的输出目录）\" class=\"headerlink\" title=\"2、借助clean-webpack-plugin （默认会删除output指定的输出目录）\"></a>2、借助clean-webpack-plugin （默认会删除output指定的输出目录）</h3><p>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用这个插件<br>首先在webpack配置文件引入这个插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后在plugins中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">new</span> CleanWebpackPlugin()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\"><a href=\"#使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\" class=\"headerlink\" title=\"使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\"></a>使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）</h2><p>根据 can i use (<a href=\"https://caniuse.com/)%E8%A7%84%E5%88%99\">https://caniuse.com/)规则</a><br>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过webpack进行px转化为rem\"><a href=\"#通过webpack进行px转化为rem\" class=\"headerlink\" title=\"通过webpack进行px转化为rem\"></a>通过webpack进行px转化为rem</h2><p>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i px2rem-loader -D</span><br><span class=\"line\">npm i lib-flexible -S</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add px2rem-loader -D</span><br><span class=\"line\">yarn add lib-flexible -S</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态资源内联\"><a href=\"#静态资源内联\" class=\"headerlink\" title=\"静态资源内联\"></a>静态资源内联</h2><h2 id=\"多页面打包方案\"><a href=\"#多页面打包方案\" class=\"headerlink\" title=\"多页面打包方案\"></a>多页面打包方案</h2><p>::: tip 思路<br>每个页面对应一个entry，一个html-webpack-plugin<br>手动添加灵活性差，可以利用glob.sync<br>entry: glob.sync(path.join(__dirname, ‘./src/*/index.js’))<br>:::<br>（1）安装Glob</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i glob -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add glob -D</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用<br>首先需要明白，glob.sync可以帮助我们获取到所有src文件夹下面的index.js入口，我们根据这个功能来展开</p>\n<p>引入glob</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们可以写一个函数以动态的创建入口和出口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = &#123;&#125;; <span class=\"comment\">// 存储输入</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> HtmlWebpackPlugins = [];<span class=\"comment\">// 存储对应插件配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">&#x27;./src/*/index.js&#x27;</span>)) <span class=\"comment\">// 获取所有文件夹下的index.js路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    entryFiles.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entryFile = item;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>); <span class=\"comment\">// 通过正则表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageName = match &amp;&amp; match[<span class=\"number\">1</span>]; <span class=\"comment\">// 获取index.js父文件夹的名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">        entry[pageName] = entryFile; <span class=\"comment\">// 创建输入</span></span><br><span class=\"line\">        HtmlWebpackPlugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">                <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;pageName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">`<span class=\"subst\">$&#123;pageName&#125;</span>.html`</span>,</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: [pageName],</span><br><span class=\"line\">                <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ); <span class=\"comment\">// 以数组的形式存储输出口</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        entry,</span><br><span class=\"line\">        HtmlWebpackPlugins</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义好函数之后，我们将对应数据配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, HtmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry, <span class=\"comment\">// 入口数据</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[chunkhash:8].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">            <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">            cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin()</span><br><span class=\"line\">    ].concat(HtmlWebpackPlugins) <span class=\"comment\">// 连接两个数组</span></span><br></pre></td></tr></table></figure>\n\n<p>以上便是当多页面情况的处理方式，灵活性高，后期可以根据项目任意修改</p>\n<h2 id=\"使用sourcemap\"><a href=\"#使用sourcemap\" class=\"headerlink\" title=\"使用sourcemap\"></a>使用sourcemap</h2><p>::: tip 功能<br><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a><br>开发环境开启，线上环境关闭（容易暴露业务逻辑）<br>线上排查问题的时候可将sourcemap上传到错误监控系统<br>:::<br>（1）关键字<br>eval: 使用eval包裹模块代码</p>\n<p>source map: 产生.map文件</p>\n<p>cheap: 不包含列信息</p>\n<p>inline: 将.map作为DataURI嵌入，不单独生成.map文件</p>\n<p>module: 包含loader的sourcemap</p>\n<p>（2）具体功能细化<br><a href=\"https://segmentfault.com/a/1190000016404266?utm_source=tag-newest\">https://segmentfault.com/a/1190000016404266?utm_source=tag-newest</a></p>\n<h2 id=\"提取页面公共资源\"><a href=\"#提取页面公共资源\" class=\"headerlink\" title=\"提取页面公共资源\"></a>提取页面公共资源</h2><h3 id=\"基础库分离（以react为例）\"><a href=\"#基础库分离（以react为例）\" class=\"headerlink\" title=\"基础库分离（以react为例）\"></a>基础库分离（以react为例）</h3><p>（1）通过html-webpack-externals-plugin<br>::: tip<br>思路：将react、react-dom 基础包通过cdn引入，不打入bundle中<br>方法：使用html-webpack-externals-plugin<br>:::</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-externals-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackExternalsPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">externals</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">module</span>: <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;https://unpkg.com/react@16/umd/react.development.js&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">global</span>: <span class=\"string\">&#x27;React&#x27;</span></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"attr\">module</span>: <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;https://unpkg.com/react-dom@16/umd/react-dom.development.js&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">global</span>: <span class=\"string\">&#x27;ReactDOM&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>（1）利用SplitChunksPlugin 进行公共脚本分离<br>webpack4内置的，替代CommonsChunkPlugin插件</p>\n<p>chunks 参数说明：</p>\n<ol>\n<li><p>async异步引入的库进行分离</p>\n</li>\n<li><p>inital 同步引入的库进行分离</p>\n</li>\n<li><p>all 所有引入的库进行分离</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 分离的包体积大小</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">commons</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(react|react-dom)/</span>, <span class=\"comment\">// 匹配出需要分离的包</span></span><br><span class=\"line\">                name: <span class=\"string\">&#x27;vendonrs&#x27;</span>, </span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">minChunls</span>: <span class=\"number\">2</span> <span class=\"comment\">// 设置最小的引用次数为2次</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tree-shaking-摇树优化\"><a href=\"#tree-shaking-摇树优化\" class=\"headerlink\" title=\"tree shaking (摇树优化)\"></a>tree shaking (摇树优化)</h2><p>::: tip 概念<br>一模块可能有多个方法，只要其中的某个方法使用到，则整个文件都会被打到bundle里，tree shaking就是只把用到的方法打到bundle，没用到的方法会在uglify阶段被擦除掉<br>:::</p>\n<p>::: tip 使用<br>webpack 默认支持，在.babelrc里设置 modules: false 即可<br>:::</p>\n<p>:::tip 要求<br>必须是ES6的语法，CJS的方式不支持<br>:::</p>\n<p>:::tip 原理<br>利用ES6模块的特点：</p>\n<ol>\n<li>只能作为模块顶层的语句出现</li>\n<li>import的模块名只能是字符串常量</li>\n<li>import binding 是immutable的</li>\n</ol>\n<p>ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析（不执行代码，从字面量上对代码进行分析，ES6之前的模块化，比如我们可以动态require一个模块，只有执行后才知道引用的什么模块，这就不能通过静态分析去优化）</p>\n<p>代码擦除： uglify阶段删除无用代码<br>:::</p>\n<h2 id=\"Scope-Hoisting使用和原理分析\"><a href=\"#Scope-Hoisting使用和原理分析\" class=\"headerlink\" title=\"Scope Hoisting使用和原理分析\"></a>Scope Hoisting使用和原理分析</h2><p>::: warning 引入<br>没有开启Scope Hoisting时会出现有大量闭包函数的代码；<br>大量函数闭包包裹代码，导致体积增大（模块越多越明显）<br>运行代码时创建的函数作用域变多，内存开销变大</p>\n<p>结论： 被webpack转换后的模块会带上一层包裹，import会被转换成_webpack_require<br>:::</p>\n<p>::: tip 原理<br>将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突<br>:::</p>\n<p>::: tip 优势<br>通过scope hoisting 可以减少函数声明代码和内存开销<br>:::</p>\n<p>::: tip 使用<br>webpack mode 为 production 默认开启<br>必须是ES6语法<br>:::</p>\n<h2 id=\"代码分割和动态import\"><a href=\"#代码分割和动态import\" class=\"headerlink\" title=\"代码分割和动态import\"></a>代码分割和动态import</h2><p>::: tip 懒加载JS方式<br>CommonJS: require.ensure<br>ES6: 动态import（目前没有原生支持，需要Babel转换）<br>:::</p>\n<h3 id=\"动态import使用方法\"><a href=\"#动态import使用方法\" class=\"headerlink\" title=\"动态import使用方法\"></a>动态import使用方法</h3><p>1、安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/plugin-syntax-dynamic-<span class=\"keyword\">import</span> --sava-dev</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/plugin-syntax-dynamic-<span class=\"keyword\">import</span> --sava-dev</span><br></pre></td></tr></table></figure>\n\n<p>2、ES6: 动态import<br>借助babel，在.babelrc中添加以下插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;plugin&quot;</span>: [<span class=\"string\">&quot;@babel/plugin-syntax-dynamic-import&quot;</span>],</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack使用ESLint\"><a href=\"#webpack使用ESLint\" class=\"headerlink\" title=\"webpack使用ESLint\"></a>webpack使用ESLint</h2><p>::: tip 意义<br>对代码进行规范检查，避免语法错误<br>:::</p>\n<h3 id=\"方案一：ESLint与CI-CD集成\"><a href=\"#方案一：ESLint与CI-CD集成\" class=\"headerlink\" title=\"方案一：ESLint与CI/CD集成\"></a>方案一：ESLint与CI/CD集成</h3><h3 id=\"方案二：webpack与ESLint集成-https-eslint-bootcss-com\"><a href=\"#方案二：webpack与ESLint集成-https-eslint-bootcss-com\" class=\"headerlink\" title=\"方案二：webpack与ESLint集成(https://eslint.bootcss.com/)\"></a>方案二：webpack与ESLint集成(<a href=\"https://eslint.bootcss.com/\">https://eslint.bootcss.com/</a>)</h3><p><a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb</a></p>\n<h2 id=\"webpack-打包组件或者基础库\"><a href=\"#webpack-打包组件或者基础库\" class=\"headerlink\" title=\"webpack 打包组件或者基础库\"></a>webpack 打包组件或者基础库</h2><p>webpack除了可以用来打包应用，也可以用来打包js库</p>\n<h2 id=\"webpack实现SSR打包\"><a href=\"#webpack实现SSR打包\" class=\"headerlink\" title=\"webpack实现SSR打包\"></a>webpack实现SSR打包</h2><p>::: tip 服务端渲染（SSR）是什么<br>渲染：HTML+CSS+JS+DATA -&gt; 渲染后的HTML</p>\n<p>服务端：<br>所有模板等资源都存储在服务端<br>内网机器拉取数据更快<br>一个HTML返回所有数据<br>:::</p>\n<h3 id=\"客户端渲染（CSR）和服务端渲染（SSR）比对\"><a href=\"#客户端渲染（CSR）和服务端渲染（SSR）比对\" class=\"headerlink\" title=\"客户端渲染（CSR）和服务端渲染（SSR）比对\"></a>客户端渲染（CSR）和服务端渲染（SSR）比对</h3><p><a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111127675.png\"><img src=\"https://img-blog.csdnimg.cn/20200417111127675.png\" alt=\"CSR\\SSR\"></a></p>\n<p><a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111343821.png\"><img src=\"https://img-blog.csdnimg.cn/20200417111343821.png\" alt=\"CSR\\SSR\"></a></p>\n<h3 id=\"SSR代码实现思路\"><a href=\"#SSR代码实现思路\" class=\"headerlink\" title=\"SSR代码实现思路\"></a>SSR代码实现思路</h3><p>（1）服务端<br>使用 react-dom/server 的 renderToString 方法将React组件渲染成字符串</p>\n<p>服务端路由返回对应的模板</p>\n<p>（2）客户端<br>打包出针对服务端的组件</p>\n<h3 id=\"搭建SSR\"><a href=\"#搭建SSR\" class=\"headerlink\" title=\"搭建SSR\"></a>搭建SSR</h3><p>1、创建服务端环境<br>在当前项目中创建server文件夹，接下来将用express帮助搭建服务端环境<br>安装express</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express -D</span><br></pre></td></tr></table></figure>\n\n<p>在server中创建index.js入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div className=&quot;root&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"subst\">$&#123;str&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、创建一个ssr打包<br>首先创建一个打包文件,注意js的命名不再需要hash，然后在npm Script配置，假设我这里创建名字叫webpack.ssr.js<br>而后我们在npm Script中配置<code>&quot;build:ssr&quot;: &quot;webpack --config webpack.ssr.js&quot;</code>以创建一个打包命令</p>\n<h3 id=\"webpack-ssr-打包存在的问题\"><a href=\"#webpack-ssr-打包存在的问题\" class=\"headerlink\" title=\"webpack ssr 打包存在的问题\"></a>webpack ssr 打包存在的问题</h3><ol>\n<li><p>浏览器的全局变量（Node.js中没有document，window）<br> 组件适配：将不兼容的组件根据打包环境进行适配<br> 请求适配：将fetch或者ajax发送请求的写法改成isomorphic-fetch 或者 axios</p>\n</li>\n<li><p>样式问题（Node.js 无法解析 css)<br> 方案一：服务端打包通过ignore-loader忽略掉css的解析<br> 方案二：将 style-loader 替换成 isomorphic-style-loader</p>\n</li>\n</ol>\n<h3 id=\"如何解决样式不显示的问题\"><a href=\"#如何解决样式不显示的问题\" class=\"headerlink\" title=\"如何解决样式不显示的问题\"></a>如何解决样式不显示的问题</h3><p>使用打包出来的浏览器端html为模板<br>设置占位符，动态插入组件</p>\n<p>针对样式不显示的情况我们接下来修改server下面的index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(path.join(__dirname, <span class=\"string\">&#x27;../dist/search.html&#x27;</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace(<span class=\"string\">&#x27;&lt;!--HTML_PLACEHOLDER--&gt;&#x27;</span>, str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改我们的serch.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"comment\">&lt;!--HTML_PLACEHOLDER--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>针对数据的情况，我们同样也可以通过占位符的方式来处理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"comment\">&lt;!--HTML_PLACEHOLDER--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--INITIAL_DATA_PLACEHOLDER--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改server/index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(path.join(__dirname, <span class=\"string\">&#x27;../dist/search.html&#x27;</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../data.json&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataStr = <span class=\"built_in\">JSON</span>.stringify(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace(<span class=\"string\">&#x27;&lt;!--HTML_PLACEHOLDER--&gt;&#x27;</span>, str)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;&lt;!--INITIAL_DATA_PLACEHOLDER--&gt;&#x27;</span>, <span class=\"string\">`&lt;script&gt;window.__initial_data=<span class=\"subst\">$&#123;dataStr&#125;</span>&lt;/script&gt;`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化构建时命令行显示日志\"><a href=\"#优化构建时命令行显示日志\" class=\"headerlink\" title=\"优化构建时命令行显示日志\"></a>优化构建时命令行显示日志</h2><p>::: tip 需求<br>构建时展示的一大堆日志，很多并不需要开发者关注<br>:::<br>通过设置stats来优化，开发阶段放在devServer，生产阶段放在module.exports中。<br>设置的属性参考<a href=\"https://www.webpackjs.com/configuration/stats/\">https://www.webpackjs.com/configuration/stats/</a></p>\n<p>除了设置stats的方式，还可以通过<code>friendly-errors-webpack-plugin</code>,并且设置<code>stats: errors-only</code></p>\n<p>1、安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i friendly-errors-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add friendly-errors-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>2、使用<br>在生产环境和开发环境中引入对应插件即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;friendly-errors-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin()</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在webpack中进行错误捕获及异常处理\"><a href=\"#在webpack中进行错误捕获及异常处理\" class=\"headerlink\" title=\"在webpack中进行错误捕获及异常处理\"></a>在webpack中进行错误捕获及异常处理</h2><p>::: tip 需求<br>在 CI/CD 的 pipline 或者发布系统需要知道当前构建状态</p>\n<p>每次构建完成后输入 echo $? 获取错误码<br>:::</p>\n<p>::: danger 注意<br>webpack4 之前版本构建失败不会抛出错误码（error code）</p>\n<p>Node.js 中的 process.exit 规范<br>0 表示成功完成，回掉函数中，err为null<br>非 0 表示执行失败，回掉函数中，err不为null，err.code 就是传给 exit 的数字<br>:::</p>\n<p>::: tip 如何捕获<br>compiler 在每次构建结束后会触发 done 这个 hook<br>process.exit 主动处理构建报错<br>:::</p>\n<p>通过在plugins中增加这段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hooks.done.tap(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stats.compilation.errors &amp;&amp; process.argv.indexOf(<span class=\"string\">&#x27;--watch&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;build error&#x27;</span>);</span><br><span class=\"line\">            process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h2 id=\"自动清理构建目录\"><a href=\"#自动清理构建目录\" class=\"headerlink\" title=\"自动清理构建目录\"></a>自动清理构建目录</h2><h3 id=\"1、通过npm-script清理构建目录（不够优雅）\"><a href=\"#1、通过npm-script清理构建目录（不够优雅）\" class=\"headerlink\" title=\"1、通过npm script清理构建目录（不够优雅）\"></a>1、通过npm script清理构建目录（不够优雅）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ./dist &amp;&amp; webpack</span><br><span class=\"line\">rimraf ./dist &amp;&amp; webpack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、借助clean-webpack-plugin-（默认会删除output指定的输出目录）\"><a href=\"#2、借助clean-webpack-plugin-（默认会删除output指定的输出目录）\" class=\"headerlink\" title=\"2、借助clean-webpack-plugin （默认会删除output指定的输出目录）\"></a>2、借助clean-webpack-plugin （默认会删除output指定的输出目录）</h3><p>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用这个插件<br>首先在webpack配置文件引入这个插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后在plugins中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">new</span> CleanWebpackPlugin()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\"><a href=\"#使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\" class=\"headerlink\" title=\"使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）\"></a>使用PostCSS插件autoprefixer自动补齐CSS3前缀（后置处理）</h2><p>根据 can i use (<a href=\"https://caniuse.com/)%E8%A7%84%E5%88%99\">https://caniuse.com/)规则</a><br>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过webpack进行px转化为rem\"><a href=\"#通过webpack进行px转化为rem\" class=\"headerlink\" title=\"通过webpack进行px转化为rem\"></a>通过webpack进行px转化为rem</h2><p>（1）安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i px2rem-loader -D</span><br><span class=\"line\">npm i lib-flexible -S</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add px2rem-loader -D</span><br><span class=\"line\">yarn add lib-flexible -S</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态资源内联\"><a href=\"#静态资源内联\" class=\"headerlink\" title=\"静态资源内联\"></a>静态资源内联</h2><h2 id=\"多页面打包方案\"><a href=\"#多页面打包方案\" class=\"headerlink\" title=\"多页面打包方案\"></a>多页面打包方案</h2><p>::: tip 思路<br>每个页面对应一个entry，一个html-webpack-plugin<br>手动添加灵活性差，可以利用glob.sync<br>entry: glob.sync(path.join(__dirname, ‘./src/*/index.js’))<br>:::<br>（1）安装Glob</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i glob -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add glob -D</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用<br>首先需要明白，glob.sync可以帮助我们获取到所有src文件夹下面的index.js入口，我们根据这个功能来展开</p>\n<p>引入glob</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后我们可以写一个函数以动态的创建入口和出口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setMPA = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = &#123;&#125;; <span class=\"comment\">// 存储输入</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> HtmlWebpackPlugins = [];<span class=\"comment\">// 存储对应插件配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(path.join(__dirname, <span class=\"string\">&#x27;./src/*/index.js&#x27;</span>)) <span class=\"comment\">// 获取所有文件夹下的index.js路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    entryFiles.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> entryFile = item;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> match = entryFile.match(<span class=\"regexp\">/src\\/(.*)\\/index\\.js/</span>); <span class=\"comment\">// 通过正则表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageName = match &amp;&amp; match[<span class=\"number\">1</span>]; <span class=\"comment\">// 获取index.js父文件夹的名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">        entry[pageName] = entryFile; <span class=\"comment\">// 创建输入</span></span><br><span class=\"line\">        HtmlWebpackPlugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin (&#123;</span><br><span class=\"line\">                <span class=\"attr\">template</span>: path.join(__dirname, <span class=\"string\">`src/<span class=\"subst\">$&#123;pageName&#125;</span>/index.html`</span>),</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">`<span class=\"subst\">$&#123;pageName&#125;</span>.html`</span>,</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: [pageName],</span><br><span class=\"line\">                <span class=\"attr\">inject</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">minify</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">html5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">preserveLineBreaks</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">removeComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ); <span class=\"comment\">// 以数组的形式存储输出口</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        entry,</span><br><span class=\"line\">        HtmlWebpackPlugins</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义好函数之后，我们将对应数据配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; entry, HtmlWebpackPlugins &#125; = setMPA();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry, <span class=\"comment\">// 入口数据</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[chunkhash:8].js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name]_[contenthash:8].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin (&#123;</span><br><span class=\"line\">            <span class=\"attr\">assetNameRegExp</span>: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">            cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin()</span><br><span class=\"line\">    ].concat(HtmlWebpackPlugins) <span class=\"comment\">// 连接两个数组</span></span><br></pre></td></tr></table></figure>\n\n<p>以上便是当多页面情况的处理方式，灵活性高，后期可以根据项目任意修改</p>\n<h2 id=\"使用sourcemap\"><a href=\"#使用sourcemap\" class=\"headerlink\" title=\"使用sourcemap\"></a>使用sourcemap</h2><p>::: tip 功能<br><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a><br>开发环境开启，线上环境关闭（容易暴露业务逻辑）<br>线上排查问题的时候可将sourcemap上传到错误监控系统<br>:::<br>（1）关键字<br>eval: 使用eval包裹模块代码</p>\n<p>source map: 产生.map文件</p>\n<p>cheap: 不包含列信息</p>\n<p>inline: 将.map作为DataURI嵌入，不单独生成.map文件</p>\n<p>module: 包含loader的sourcemap</p>\n<p>（2）具体功能细化<br><a href=\"https://segmentfault.com/a/1190000016404266?utm_source=tag-newest\">https://segmentfault.com/a/1190000016404266?utm_source=tag-newest</a></p>\n<h2 id=\"提取页面公共资源\"><a href=\"#提取页面公共资源\" class=\"headerlink\" title=\"提取页面公共资源\"></a>提取页面公共资源</h2><h3 id=\"基础库分离（以react为例）\"><a href=\"#基础库分离（以react为例）\" class=\"headerlink\" title=\"基础库分离（以react为例）\"></a>基础库分离（以react为例）</h3><p>（1）通过html-webpack-externals-plugin<br>::: tip<br>思路：将react、react-dom 基础包通过cdn引入，不打入bundle中<br>方法：使用html-webpack-externals-plugin<br>:::</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackExternalsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-externals-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackExternalsPlugin(&#123;</span><br><span class=\"line\">        <span class=\"attr\">externals</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">module</span>: <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;https://unpkg.com/react@16/umd/react.development.js&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">global</span>: <span class=\"string\">&#x27;React&#x27;</span></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"attr\">module</span>: <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;https://unpkg.com/react-dom@16/umd/react-dom.development.js&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">global</span>: <span class=\"string\">&#x27;ReactDOM&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>（1）利用SplitChunksPlugin 进行公共脚本分离<br>webpack4内置的，替代CommonsChunkPlugin插件</p>\n<p>chunks 参数说明：</p>\n<ol>\n<li><p>async异步引入的库进行分离</p>\n</li>\n<li><p>inital 同步引入的库进行分离</p>\n</li>\n<li><p>all 所有引入的库进行分离</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 分离的包体积大小</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">commons</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/(react|react-dom)/</span>, <span class=\"comment\">// 匹配出需要分离的包</span></span><br><span class=\"line\">                name: <span class=\"string\">&#x27;vendonrs&#x27;</span>, </span><br><span class=\"line\">                <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">minChunls</span>: <span class=\"number\">2</span> <span class=\"comment\">// 设置最小的引用次数为2次</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tree-shaking-摇树优化\"><a href=\"#tree-shaking-摇树优化\" class=\"headerlink\" title=\"tree shaking (摇树优化)\"></a>tree shaking (摇树优化)</h2><p>::: tip 概念<br>一模块可能有多个方法，只要其中的某个方法使用到，则整个文件都会被打到bundle里，tree shaking就是只把用到的方法打到bundle，没用到的方法会在uglify阶段被擦除掉<br>:::</p>\n<p>::: tip 使用<br>webpack 默认支持，在.babelrc里设置 modules: false 即可<br>:::</p>\n<p>:::tip 要求<br>必须是ES6的语法，CJS的方式不支持<br>:::</p>\n<p>:::tip 原理<br>利用ES6模块的特点：</p>\n<ol>\n<li>只能作为模块顶层的语句出现</li>\n<li>import的模块名只能是字符串常量</li>\n<li>import binding 是immutable的</li>\n</ol>\n<p>ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析（不执行代码，从字面量上对代码进行分析，ES6之前的模块化，比如我们可以动态require一个模块，只有执行后才知道引用的什么模块，这就不能通过静态分析去优化）</p>\n<p>代码擦除： uglify阶段删除无用代码<br>:::</p>\n<h2 id=\"Scope-Hoisting使用和原理分析\"><a href=\"#Scope-Hoisting使用和原理分析\" class=\"headerlink\" title=\"Scope Hoisting使用和原理分析\"></a>Scope Hoisting使用和原理分析</h2><p>::: warning 引入<br>没有开启Scope Hoisting时会出现有大量闭包函数的代码；<br>大量函数闭包包裹代码，导致体积增大（模块越多越明显）<br>运行代码时创建的函数作用域变多，内存开销变大</p>\n<p>结论： 被webpack转换后的模块会带上一层包裹，import会被转换成_webpack_require<br>:::</p>\n<p>::: tip 原理<br>将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突<br>:::</p>\n<p>::: tip 优势<br>通过scope hoisting 可以减少函数声明代码和内存开销<br>:::</p>\n<p>::: tip 使用<br>webpack mode 为 production 默认开启<br>必须是ES6语法<br>:::</p>\n<h2 id=\"代码分割和动态import\"><a href=\"#代码分割和动态import\" class=\"headerlink\" title=\"代码分割和动态import\"></a>代码分割和动态import</h2><p>::: tip 懒加载JS方式<br>CommonJS: require.ensure<br>ES6: 动态import（目前没有原生支持，需要Babel转换）<br>:::</p>\n<h3 id=\"动态import使用方法\"><a href=\"#动态import使用方法\" class=\"headerlink\" title=\"动态import使用方法\"></a>动态import使用方法</h3><p>1、安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/plugin-syntax-dynamic-<span class=\"keyword\">import</span> --sava-dev</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/plugin-syntax-dynamic-<span class=\"keyword\">import</span> --sava-dev</span><br></pre></td></tr></table></figure>\n\n<p>2、ES6: 动态import<br>借助babel，在.babelrc中添加以下插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;plugin&quot;</span>: [<span class=\"string\">&quot;@babel/plugin-syntax-dynamic-import&quot;</span>],</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack使用ESLint\"><a href=\"#webpack使用ESLint\" class=\"headerlink\" title=\"webpack使用ESLint\"></a>webpack使用ESLint</h2><p>::: tip 意义<br>对代码进行规范检查，避免语法错误<br>:::</p>\n<h3 id=\"方案一：ESLint与CI-CD集成\"><a href=\"#方案一：ESLint与CI-CD集成\" class=\"headerlink\" title=\"方案一：ESLint与CI/CD集成\"></a>方案一：ESLint与CI/CD集成</h3><h3 id=\"方案二：webpack与ESLint集成-https-eslint-bootcss-com\"><a href=\"#方案二：webpack与ESLint集成-https-eslint-bootcss-com\" class=\"headerlink\" title=\"方案二：webpack与ESLint集成(https://eslint.bootcss.com/)\"></a>方案二：webpack与ESLint集成(<a href=\"https://eslint.bootcss.com/\">https://eslint.bootcss.com/</a>)</h3><p><a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb</a></p>\n<h2 id=\"webpack-打包组件或者基础库\"><a href=\"#webpack-打包组件或者基础库\" class=\"headerlink\" title=\"webpack 打包组件或者基础库\"></a>webpack 打包组件或者基础库</h2><p>webpack除了可以用来打包应用，也可以用来打包js库</p>\n<h2 id=\"webpack实现SSR打包\"><a href=\"#webpack实现SSR打包\" class=\"headerlink\" title=\"webpack实现SSR打包\"></a>webpack实现SSR打包</h2><p>::: tip 服务端渲染（SSR）是什么<br>渲染：HTML+CSS+JS+DATA -&gt; 渲染后的HTML</p>\n<p>服务端：<br>所有模板等资源都存储在服务端<br>内网机器拉取数据更快<br>一个HTML返回所有数据<br>:::</p>\n<h3 id=\"客户端渲染（CSR）和服务端渲染（SSR）比对\"><a href=\"#客户端渲染（CSR）和服务端渲染（SSR）比对\" class=\"headerlink\" title=\"客户端渲染（CSR）和服务端渲染（SSR）比对\"></a>客户端渲染（CSR）和服务端渲染（SSR）比对</h3><p><a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111127675.png\"><img src=\"https://img-blog.csdnimg.cn/20200417111127675.png\" alt=\"CSR\\SSR\"></a></p>\n<p><a data-fancybox title=\"CSR\\SSR\" href=\"https://img-blog.csdnimg.cn/20200417111343821.png\"><img src=\"https://img-blog.csdnimg.cn/20200417111343821.png\" alt=\"CSR\\SSR\"></a></p>\n<h3 id=\"SSR代码实现思路\"><a href=\"#SSR代码实现思路\" class=\"headerlink\" title=\"SSR代码实现思路\"></a>SSR代码实现思路</h3><p>（1）服务端<br>使用 react-dom/server 的 renderToString 方法将React组件渲染成字符串</p>\n<p>服务端路由返回对应的模板</p>\n<p>（2）客户端<br>打包出针对服务端的组件</p>\n<h3 id=\"搭建SSR\"><a href=\"#搭建SSR\" class=\"headerlink\" title=\"搭建SSR\"></a>搭建SSR</h3><p>1、创建服务端环境<br>在当前项目中创建server文件夹，接下来将用express帮助搭建服务端环境<br>安装express</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express -D</span><br></pre></td></tr></table></figure>\n\n<p>在server中创建index.js入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div className=&quot;root&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                <span class=\"subst\">$&#123;str&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、创建一个ssr打包<br>首先创建一个打包文件,注意js的命名不再需要hash，然后在npm Script配置，假设我这里创建名字叫webpack.ssr.js<br>而后我们在npm Script中配置<code>&quot;build:ssr&quot;: &quot;webpack --config webpack.ssr.js&quot;</code>以创建一个打包命令</p>\n<h3 id=\"webpack-ssr-打包存在的问题\"><a href=\"#webpack-ssr-打包存在的问题\" class=\"headerlink\" title=\"webpack ssr 打包存在的问题\"></a>webpack ssr 打包存在的问题</h3><ol>\n<li><p>浏览器的全局变量（Node.js中没有document，window）<br> 组件适配：将不兼容的组件根据打包环境进行适配<br> 请求适配：将fetch或者ajax发送请求的写法改成isomorphic-fetch 或者 axios</p>\n</li>\n<li><p>样式问题（Node.js 无法解析 css)<br> 方案一：服务端打包通过ignore-loader忽略掉css的解析<br> 方案二：将 style-loader 替换成 isomorphic-style-loader</p>\n</li>\n</ol>\n<h3 id=\"如何解决样式不显示的问题\"><a href=\"#如何解决样式不显示的问题\" class=\"headerlink\" title=\"如何解决样式不显示的问题\"></a>如何解决样式不显示的问题</h3><p>使用打包出来的浏览器端html为模板<br>设置占位符，动态插入组件</p>\n<p>针对样式不显示的情况我们接下来修改server下面的index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(path.join(__dirname, <span class=\"string\">&#x27;../dist/search.html&#x27;</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace(<span class=\"string\">&#x27;&lt;!--HTML_PLACEHOLDER--&gt;&#x27;</span>, str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后修改我们的serch.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"comment\">&lt;!--HTML_PLACEHOLDER--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>针对数据的情况，我们同样也可以通过占位符的方式来处理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"comment\">&lt;!--HTML_PLACEHOLDER--&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--INITIAL_DATA_PLACEHOLDER--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改server/index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">global</span>.window = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; renderToString &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-dom/server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> SSR = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../dist/search-server&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(path.join(__dirname, <span class=\"string\">&#x27;../dist/search.html&#x27;</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../data.json&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.use(express.static(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&#x27;/search&#x27;</span>, <span class=\"function\">(<span class=\"params\">reg, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = renderMarkup(renderToString(SSR));</span><br><span class=\"line\">        res.status(<span class=\"number\">200</span>).send(html);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链接监听</span></span><br><span class=\"line\">    app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running on port:&#x27;</span>, port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server (process.env.PORT || <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个HTML模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderMarkup = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataStr = <span class=\"built_in\">JSON</span>.stringify(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace(<span class=\"string\">&#x27;&lt;!--HTML_PLACEHOLDER--&gt;&#x27;</span>, str)</span><br><span class=\"line\">        .replace(<span class=\"string\">&#x27;&lt;!--INITIAL_DATA_PLACEHOLDER--&gt;&#x27;</span>, <span class=\"string\">`&lt;script&gt;window.__initial_data=<span class=\"subst\">$&#123;dataStr&#125;</span>&lt;/script&gt;`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化构建时命令行显示日志\"><a href=\"#优化构建时命令行显示日志\" class=\"headerlink\" title=\"优化构建时命令行显示日志\"></a>优化构建时命令行显示日志</h2><p>::: tip 需求<br>构建时展示的一大堆日志，很多并不需要开发者关注<br>:::<br>通过设置stats来优化，开发阶段放在devServer，生产阶段放在module.exports中。<br>设置的属性参考<a href=\"https://www.webpackjs.com/configuration/stats/\">https://www.webpackjs.com/configuration/stats/</a></p>\n<p>除了设置stats的方式，还可以通过<code>friendly-errors-webpack-plugin</code>,并且设置<code>stats: errors-only</code></p>\n<p>1、安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i friendly-errors-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add friendly-errors-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>2、使用<br>在生产环境和开发环境中引入对应插件即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;friendly-errors-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">new</span> FriendlyErrorsWebpackPlugin()</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在webpack中进行错误捕获及异常处理\"><a href=\"#在webpack中进行错误捕获及异常处理\" class=\"headerlink\" title=\"在webpack中进行错误捕获及异常处理\"></a>在webpack中进行错误捕获及异常处理</h2><p>::: tip 需求<br>在 CI/CD 的 pipline 或者发布系统需要知道当前构建状态</p>\n<p>每次构建完成后输入 echo $? 获取错误码<br>:::</p>\n<p>::: danger 注意<br>webpack4 之前版本构建失败不会抛出错误码（error code）</p>\n<p>Node.js 中的 process.exit 规范<br>0 表示成功完成，回掉函数中，err为null<br>非 0 表示执行失败，回掉函数中，err不为null，err.code 就是传给 exit 的数字<br>:::</p>\n<p>::: tip 如何捕获<br>compiler 在每次构建结束后会触发 done 这个 hook<br>process.exit 主动处理构建报错<br>:::</p>\n<p>通过在plugins中增加这段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hooks.done.tap(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stats.compilation.errors &amp;&amp; process.argv.indexOf(<span class=\"string\">&#x27;--watch&#x27;</span>) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;build error&#x27;</span>);</span><br><span class=\"line\">            process.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}